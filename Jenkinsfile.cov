#!groovy


def pool_env = null

def testing () {
    node('ubuntu') {
        stage("Checking out source code") {
            checkout scm
        }

        def image 
        stage("Building kcov docker image") {
            image = dockerBuild("indy-sdk-kcov", "ci/code_coverage.dockerfile ci/")
        }
        

        stage("Collecting test coverage") {
            image.inside {
                sh 'cargo build --manifest-path=libindy/Cargo.toml' // create libindy.so

                calcCoverageRust("libindy")
            }
        }
    }
}

testing()

def getUserUid() {
    return sh(returnStdout: true, script: 'id -u').trim()
}

def dockerBuild(name, file = 'ci/ubuntu.dockerfile ci', customParams = '') {
    return docker.build("$name-test", "--build-arg uid=${getUserUid()} ${customParams} -f $file")
}

def calcCoverageRust(dir) {
    withEnv(["RUST_PROJECT_DIR=${dir}"]) {
        sh '''
            INDY_SDK_DIR=$(pwd)

            cd $RUST_PROJECT_DIR
            cargo test --no-run
            for i in $(find target/debug -maxdepth 1 -executable -type f | grep -v '\\.so\$')
            do
                LD_LIBRARY_PATH=$LD_LIBRARY_PATH:INDY_SDK_DIR/libindy/target/debug/ \
                RUST_TEST_THREADS=1 \
                kcov \
                    --exclude-pattern=$CARGO_HOME,/usr/lib \
                    --verify \
                    ../cov \
                    \$i
            done
        '''
    }
}


def createPool() {
    pool_env = dockerBuild('indy_pool', 'ci/indy-pool.dockerfile ci')
    pool_env.run("-p 9701-9708:9701-9708")
}

def destroyPool() {
    if (pool_env != null) {
        pool_env.stop()
    }
}
