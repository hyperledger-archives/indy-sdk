#!groovy

def rust
def vcx_python
def libindy
def libvcx
def vcx_nodejs

// ******** Artifacts Created ********
// libvcx_<ver>.deb (Debian Installable Library) ----> published Debian to https://repo.corp.evernym.com/deb/pool/main/libv/libvcx/
// vcx_<ver>.deb (Nodejs Wrapper Debian Package) ----> archived with Jenkins and Published to repo.corp.evernym.com/deb/pool
// vcx_<ver>.tgz (Nodejs Wrapper Npm Installable Package) ----> published with Filely to https://repo.corp.evernym.com/filely/npm/
// python3-vcx-wrapper-<ver>.tar.gz (Python Installable package) ----> published with Filely to https://kraken.corp.evernym.com/repo/python/upload
// ********* OTHERS ********
// DEPRECATED ( NO LONGER PRODUCED ) libvcx.tar.gz (libvcx.so file and provision_agent_keys.py) ----> archived with Jenkins

testing()

def testing() {
    stage('Testing') {
        parallel([
            'Xenial' : { mainUbuntu() },
            'Android': { android() },
            'iOS' : { ios() }
        ])
    }
}

def getUserUid() {
    return sh(returnStdout: true, script: 'id -u').trim()
}


def build(name, file, context='.', customParams = '') {
    return docker.build("$name", "${customParams} --build-arg uid=${getUserUid()} -f $file $context")
}

def getRevNumber() {
    return sh(returnStdout: true, script: 'git log --pretty=format:%h -n 1')
}

def getCurDir() {
    return sh(returnStdout: true, script: 'pwd')
}

def mainUbuntu() {
    node('ubuntu') {

        checkout scm

        def volumeInternalDir = "/sdk/vcx/output"
        def revNumber = getRevNumber()
        def volumeName = "vcx-volume1-${revNumber}"
        def libindyDockerfile = 'vcx/ci/libindy.dockerfile'
        def libvcxDockerfile = 'vcx/ci/libvcx.dockerfile'
        def pythonDockerfile = 'vcx/wrappers/python3/ci/python.dockerfile'
        def nodeDockerfile = 'vcx/wrappers/node/ci/node.dockerfile'
        def javaDockerfile = 'vcx/wrappers/java/ci/java.dockerfile'
        def uid= sh(returnStdout: true, script: 'id -u').trim()
        def cwd= sh(returnStdout: true, script: 'pwd').trim()
        def libvcx
        def python
        def node
        def java
        try {
            stage('Build Libindy Image') {
                // ******** Build the libindy base image (pulls down dependent debians from sovrin repo, and installs a majority of the dependencies)
                libindy = docker.build("libindy", "-f ${libindyDockerfile} .")
            }
            sh 'mkdir output'
            stage('Build Libvcx Image, Tests Rust Code') {

                libvcx = docker.build("libvcx", "--build-arg uid=${uid} -f ${libvcxDockerfile} .")
                libvcx.inside() {
                    sh 'vcx/ci/scripts/package.sh'
                }
            }
            stage('Test Node Wrapper') {
                node = docker.build('node', "--build-arg uid=${uid} -f ${nodeDockerfile} .")
                node.inside() {
                    sh 'vcx/wrappers/node/ci/test.sh'
                }
            }
            stage('Test Python Wrapper'){
                python = docker.build("python", "--build-arg uid=${uid} -f ${pythonDockerfile} .")
                withEnv(["PYTHONPATH=${cwd}/vcx/wrappers/python3:vcx/wrappers/python3"]){
                    python.inside() {
                        sh 'vcx/wrappers/python3/ci/test.sh'
                    }
                }
            }
            stage('Test Java Wrapper'){
                java = docker.build("java", "--build-arg uid=${uid} -f ${javaDockerfile} .")
                java.inside() {
                    sh 'cd vcx/wrappers/java && ./gradlew --no-daemon test'
                }
            }
            stage('Package Node Wrapper') {
                node.inside() {
                    sh 'vcx/wrappers/node/ci/package.sh'
                }
            }
            stage('Package Python Wrapper') {
                python.inside() {
                    sh 'vcx/wrappers/python3/ci/package.sh'
                }
            }
            stage('Package Java Wrapper') {
                java.inside() {
                    sh 'vcx/wrappers/java/ci/buildJar.sh'
                }
            }

            // debug info
            sh 'ls -al output'

            if (env.BRANCH_NAME == "master") {
                stage('Publish') {
                    // ******** PUBLISHING (artifacts are in a Docker Volume) ********
                    withCredentials([usernameColonPassword(credentialsId: 'jenkins-kraken-svc', variable: 'KRAKEN_CREDENTIALS')]) {
                        libvcx.inside("--network=host") {
                            // env.KRAKEN_CREDENTIALS = "${KRAKEN_CREDENTIALS}"
                            // ******** Publish Libvcx Debian to repo ********
                            sh "vcx/ci/scripts/publish.sh \"${KRAKEN_CREDENTIALS}\" \"libvcx*.deb\" https://kraken.corp.evernym.com/repo/portal_dev/upload"
                            sh "vcx/ci/scripts/publish.sh \"${KRAKEN_CREDENTIALS}\" \"libvcx*.deb\" https://kraken.corp.evernym.com/repo/agency_dev/upload"

                            // ******** Publish Npm Package to filely repo ********
                            sh "vcx/ci/scripts/publish.sh \"${KRAKEN_CREDENTIALS}\" \"node-vcx-wrapper*.tgz\" https://kraken.corp.evernym.com/repo/npm/upload"

                            // ******** Publish Python Package to filely repo *********
                            sh "vcx/ci/scripts/publish.sh \"${KRAKEN_CREDENTIALS}\" \"python3-vcx-wrapper*.tar.gz\" https://kraken.corp.evernym.com/repo/python/upload"

                            // ******** Publish vcx Debian To Repo (NPM PACKAGES)
                            sh "vcx/ci/scripts/publish.sh \"${KRAKEN_CREDENTIALS}\" \"vcx_*.deb\" https://kraken.corp.evernym.com/repo/agency_dev/upload"
                            sh "vcx/ci/scripts/publish.sh \"${KRAKEN_CREDENTIALS}\" \"vcx_*.deb\" https://kraken.corp.evernym.com/repo/portal_dev/upload"


                            // ******** Archive with Jenkins ********
                            archiveArtifacts allowEmptyArchive: true, artifacts: 'output/*'
                        }
                        withCredentials([file(credentialsId: 'cloudrepo-artifactory-settings-libvcx', variable: 'settingsFile')]) {
                            java.inside() {
                                sh 'cp $settingsFile .'
                                sh "chmod +x vcx/wrappers/java/ci/publishJar.sh"
                                sh 'vcx/wrappers/java/ci/publishJar.sh'
                            }
                        }

                    }
                }
            }
        } catch (Exception ex) {
            currentBuild.result = "FAILED"
            if (env.BRANCH_NAME == "master") {
                fail()
            }
            echo "$ex error"
        } finally {
            sh 'docker system df'
            step([$class: 'WsCleanup'])
        }
    }
}


def android() {
        stage('Android Build') {
            parallel([
                "x86" : { buildAndroid("x86") },
                "x86_64" : { buildAndroid("x86_64") },
                "arm" : { buildAndroid("arm") },
                "arm64" : { buildAndroid("arm64") },
                "armv7" : { buildAndroid("armv7") }
            ])
        }
        node('ubuntu') {
            try {
                def uid= sh(returnStdout: true, script: 'id -u').trim()
                checkout scm
                android = docker.build("android", "--build-arg uid=${uid} -f vcx/wrappers/java/ci/android.dockerfile .")
                stage('Android Packaging') {
                    //Package .so files into .aar
                    packageAndroid(android)
                }
                stage('Android Publishing') {
                    if (env.BRANCH_NAME == "master") {
                        //Publish package on aptly
                        publishAndroid(android)
                    }
                }
            } catch (Exception ex) {
                currentBuild.result = "FAILED"
                if (env.BRANCH_NAME == "master") {
                    fail()
                }
                echo "$ex error"
            } finally {
                sh 'docker system df'
                step([$class: 'WsCleanup'])
            }
        }
}


def ios() {
    node('macos-vcx') {
        stage('iOS Build') {
            try {
                checkout scm
                SCRIPTS_PATH="vcx/libvcx/build_scripts/ios/mac"
                WORK_DIR = "/Users/jenkins"

                // Build ios architectures
                sh "source vcx/ci/scripts/iosBuild.sh"

                // Publish to Kraken
                if (env.BRANCH_NAME == "master") {
                    withCredentials([usernameColonPassword(credentialsId: 'jenkins-kraken-svc', variable: 'KRAKEN_CREDENTIALS')]) {
                        sh "find /Users/jenkins/IOSBuilds/libvcxpartial/ -type f -name 'vcx.libvcxpartial_*_universal.zip' -exec curl -u \"${KRAKEN_CREDENTIALS}\" -X POST  https://kraken.corp.evernym.com/repo/ios/upload -F 'file=@{}' \\;"
                        sh "find /Users/jenkins/IOSBuilds/libvcxall/ -type f -name 'vcx.libvcxall_*_universal.zip' -exec curl -u \"${KRAKEN_CREDENTIALS}\" -X POST  https://kraken.corp.evernym.com/repo/ios/upload -F 'file=@{}' \\;"
                        // sh "vcx/ci/scripts/publish.sh 'vcx.libvcxpartial_*_universal.zip' https://kraken.corp.evernym.com/repo/ios/upload /Users/jenkins/IOSBuilds/libvcxpartial/"
                        // sh "vcx/ci/scripts/publish.sh 'vcx.libvcxall_*_universal.zip' https://kraken.corp.evernym.com/repo/ios/upload /Users/jenkins/IOSBuilds/libvcxall/"
                    }
                }
            } catch (Exception ex) {
                currentBuild.result = "FAILED"
                if (env.BRANCH_NAME == "master") {
                    fail()
                }
                echo "$ex error"
            } finally {
                step([$class: 'WsCleanup'])
            }

        }
    }
}

def fail() {
    def message = [
        message: "$JOB_NAME - Build # $BUILD_NUMBER - fail: Check console output at $BUILD_URL to view the results."
    ]
    slackSend message
}

def buildAndroid(arch) {
    node('ubuntu') {
        try {
            def uid= sh(returnStdout: true, script: 'id -u').trim()
            checkout scm
            android =  docker.build("android", "--build-arg uid=${uid} -f vcx/wrappers/java/ci/android.dockerfile .")

            android.inside {
                ANDROID_SCRIPT_PATH = 'vcx/ci/scripts/androidBuild.sh'
                LIBINDY_BRANCH="stable"
                LIBINDY_VERSION="1.7.0"
                LIBINDY_TAG=""

                sh 'sudo ./vcx/ci/scripts/installCert.sh'
                sh "LIBINDY_BRANCH=${LIBINDY_BRANCH} LIBINDY_VERSION=${LIBINDY_VERSION} LIBINDY_TAG=${LIBINDY_TAG} ./${ANDROID_SCRIPT_PATH} ${arch}"

            }

            dir("runtime_android_build/libvcx_${arch}") {
                stash includes: "libvcx.so", name: "libvcx_${arch}"
            }
        } catch (Exception ex) {
            currentBuild.result = "FAILED"
            if (env.BRANCH_NAME == "master") {
                fail()
            }
            echo "$ex error"
        } finally {
            sh 'docker system df'
            step([$class: 'WsCleanup'])
        }
   }
}

def packageAndroid(android) {
    all_archs = ["arm", "arm64", "armv7", "x86", "x86_64"]
    for (arch in all_archs) {
        dir("runtime_android_build/libvcx_${arch}") {
            unstash name: "libvcx_${arch}"
        }
    }
    android.inside {
        ANDROID_SCRIPT_PATH = 'vcx/ci/scripts/androidPackage.sh'
        sh "chmod +x ${ANDROID_SCRIPT_PATH}"
        sh "./${ANDROID_SCRIPT_PATH}"
    }
}

def publishAndroid(envn) {
    envn.inside {
        withCredentials([file(credentialsId: 'cloudrepo-artifactory-settings-libvcx', variable: 'settingsFile')]) {
            sh 'cp $settingsFile .'
            ANDROID_SCRIPT_PATH = 'vcx/ci/scripts/androidPublish.sh'
            sh "chmod +x ${ANDROID_SCRIPT_PATH}"
            sh "./${ANDROID_SCRIPT_PATH}"
        }
    }
}
