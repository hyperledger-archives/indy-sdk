import asyncio
import json
from ctypes import cdll
from time import sleep

import logging
from demo_utils import file_ext

from vcx.api.connection import Connection
from vcx.api.credential import Credential
from vcx.api.disclosed_proof import DisclosedProof
from vcx.api.utils import vcx_agent_provision
from vcx.api.vcx_init import vcx_init_with_config
from vcx.state import State
from vc_auth_oidc.alice_vc_auth import handle_challenge


# logging.basicConfig(level=logging.DEBUG) uncomment to get logs

provisionConfig = {
    'agency_url': 'http://localhost:8080',
    'agency_did': 'VsKV7grR1BUE29mG2Fm2kX',
    'agency_verkey': 'Hezce2UWMZ3wUhVkh2LfKSs8nDzWwzs2Win7EzNN3YaR',
    'wallet_name': 'alice_wallet',
    'wallet_key': '123',
    'payment_method': 'null',
    'enterprise_seed': '000000000000000000000000Trustee1',
    'protocol_type': '2.0',
    'communication_method': 'aries'
}


async def main():
    payment_plugin = cdll.LoadLibrary('libnullpay' + file_ext())
    payment_plugin.nullpay_init()

    print("#7 Provision an agent and wallet, get back configuration details")
    config = await vcx_agent_provision(json.dumps(provisionConfig))
    config = json.loads(config)
    # Set some additional configuration options specific to alice
    config['institution_name'] = 'alice'
    config['institution_logo_url'] = 'http://robohash.org/456'
    config['genesis_path'] = 'docker.txn'

    print("#8 Initialize libvcx with new configuration")
    await vcx_init_with_config(json.dumps(config))

    answer = input(
        "Select connection type: \n "
        "1 - setup real connection \n "
        "2 - test-suite-connection-stub \n "
        "else exit\n") \
        .lower().strip()
    if answer == '1':
        print("#1 Setup Connection")
        connection_to_faber = await setup_connection()
    elif answer == '2':
        print("#2 Setup Connection stub")
        connection_to_faber = await setup_test_connection()
    else:
        return

    print("Connection is established")

    while True:
        answer = input(
            "Would you like to do? \n "
            "1 - disclose remote connection feature \n "
            "2 - ping remote connection \n "
            "3 - update connection state (handle income disclose query or ping)\n "
            "4 - accept credential offer \n "
            "5 - create proof \n "
            "6 - pass vc_auth_oidc-challenge \n "
            "else finish \n") \
            .lower().strip()
        if answer == '1':
            print("#1 Disclose remote connection feature")
            query = input('Query: ')
            await connection_to_faber.send_discovery_features(query.strip(), None)
        elif answer == '2':
            print("#2 Ping remote connection")
            await connection_to_faber.send_ping(None)
        elif answer == '3':
            print("#3 Update connection state (handle income disclose query or ping)")
            await connection_to_faber.update_state()
        elif answer == '4':
            print("#4 Accept credential offer")
            offers = await Credential.get_offers(connection_to_faber)
            await accept_offer(connection_to_faber, offers)
        elif answer == '5':
            print("#5 Create Proof")
            requests = await DisclosedProof.get_requests(connection_to_faber)
            await create_proof(connection_to_faber, requests[0])
        elif answer == '6':
            print("#6 Pass vc_auth_oidc-challenge")
            request = await handle_challenge()
            await create_proof(None, request)
        else:
            break

    print("Finished")


async def setup_connection():
    print("#9 Input faber.py invitation details")
    details = input('invite details: ')

    print("#10 Convert to valid json and string and create a connection to faber")
    jdetails = json.loads(details)
    connection_to_faber = await Connection.create_with_details('faber', json.dumps(jdetails))
    await connection_to_faber.connect('{"use_public_did": true}')
    connection_state = await connection_to_faber.update_state()
    while connection_state != State.Accepted:
        sleep(2)
        await connection_to_faber.update_state()
        connection_state = await connection_to_faber.get_state()

    return connection_to_faber


async def setup_test_connection():
    did = input('DID generated by remote side: ')
    verkey = input('Verkey generated by remote side: ')
    label = input('Label generated by remote side: ')
    endpoint = input('Endpoint generated by remote side: ')

    connection_to_faber = \
        await Connection.create_test_connection(label.strip(), did.strip(), verkey.strip(), endpoint.strip())

    connection_info = await connection_to_faber.info()

    print('Connection info:')
    print('DID: ' + connection_info['current']['did'])
    print('Recipient Keys: ' + str(connection_info['current']['recipientKeys']))
    print('Routing Keys: ' + str(connection_info['current']['routingKeys']))
    print('Endpoint: ' + connection_info['current']['serviceEndpoint'])
    print()

    return connection_to_faber


async def accept_offer(connection_to_faber, offers):
    # Create a credential object from the credential offer
    credential = await Credential.create('credential', offers[0])

    print("#15 After receiving credential offer, send credential request")
    await credential.send_request(connection_to_faber, 0)

    print("#16 Poll agency and accept credential offer from faber")
    credential_state = await credential.get_state()
    while credential_state != State.Accepted:
        sleep(2)
        await credential.update_state()
        credential_state = await credential.get_state()


async def create_proof(connection_to_faber, request):
    print("#23 Create a Disclosed proof object from proof request")
    proof = await DisclosedProof.create('proof', request)

    print("#24 Query for credentials in the wallet that satisfy the proof request")
    credentials = await proof.get_creds()

    # Use the first available credentials to satisfy the proof request
    for attr in credentials['attrs']:
        credentials['attrs'][attr] = {
            'credential': credentials['attrs'][attr][0]
        }

    print("#25 Generate the proof")
    await proof.generate_proof(credentials, {})

    print("#26 Send the proof")
    await proof.send_proof(connection_to_faber)

    proof_state = await proof.get_state()
    while proof_state != State.Accepted:
        sleep(2)
        await proof.update_state()
        proof_state = await proof.get_state()

    print("proof is verified!!")


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
    sleep(1)
