@startuml
title DID Exchange Protocol

participant "Alice" as Alice
participant "Alice Agency" as AliceAgency
participant "Alice Agent" as AliceAgent
participant "Alice Pairwise Agent" as AlicePairwiseAgent
participant "Bob" as Bob
participant "Bob Agent" as BobAgent

== Provisioning ==

Alice -> AliceAgency: Provision Alice
note left
 Agency side:
    We can keep the common workflow as is.
    We still can create Pairwise Agents on the initiation of connection or
            accepting an invitation but use it as a mediator only.
    In the current state Pairwise Agents are already able
        - collect incoming messages
        - return collected messages
        - update status of received messages

 The key difference is that we will not use Agency anymore for sending messages to another connection side,
        so we don't need to keep other side keys on the Agency.
 Vcx will do the message preparation and sending itself.

 There is a problem with message forwarding:
    Now DIDs must be used as target (`to` filed) according to Cross-Domain Messaging HIPE.
 This problem is reflected in the issue: https://github.com/hyperledger/aries-rfcs/issues/255.
 Lovesh's suggestion sounds acceptable to us.

 So, we need to change on Agency is making support of messages forwarding based on
     Alice Verkey's (in addition to DID's based).
 It should be easy to distinguish because fully-qualified DID's must be used for a new protocol version.
end note


AliceAgency -> AliceAgent: Provision Alice

Bob -> BobAgent:
note right
 In this diagram, we assume that Bob uses different Aries, compatible Agent.
 He has published DIDDoc which is resolvable by Bob DID.
 Alice will send messages to Bob actor directly for simplification.
end note

== Invitation ==

Bob -> Alice: Share plain `invitation` message with Alice.
note right
{
    "@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/didexchange/1.0/invitation",
    "@id": "12345678900987654321",
    "label": "Bob",
    "recipientKeys": ["Bob Pairwise Verkey"],
    "serviceEndpoint": "https://example.com/endpoint",
    "routingKeys": ["Bob Agent Verkey"]
}

In the current state, we can support this Invite format only.
It contains all the information required for replying.
There is no formalized way to resolve DIDDoc using VCX for the public DID.
We need to provide the separate PoA/HIPE for it.
end note

== Connection Request ==

Alice -> Alice:
note left
`vcx_connection_create_with_invite` -> create `Connection` state object.
`vcx_connection_connect` ->  create Alice Pairwise Agent on Agency,
        prepares `connection_request` message containing Alice DIDDoc and send it.
end note

Alice -> AliceAgency: Create Alice Pairwise Agent
AliceAgency -> AliceAgent: Create Alice Pairwise Agent
AliceAgent -> AlicePairwiseAgent: Create Alice Pairwise Agent

AlicePairwiseAgent -> Alice: Alice Pairwise Agent Verkey

Alice -> Bob: send `encrypted_fwd_request` to `serviceEndpoint` taken from `invitation`
note left
encrypted_fwd_request = <pack(forward_message, "Bob Agent Verkey")>

forward_message = {
  "@type" : "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/routing/1.0/forward",
  "to"   : "Bob Verkey",
  "msg"  : encrypted_request
}

encrypted_request = <pack(connection_request, Bob Pairwise Verkey, Alice Pairwise Verkey)>

connection_request = {
  "@id": "5678876542345",
  "@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/didexchange/1.0/request",
  "label": "Bob",
  "connection": {
    "did": "Alice Pairwise DID",
  	"did_doc": {
      "@context": "https://w3id.org/did/v1"
      "id": "did:sov:1234abcd",
      "publicKey": [
        {"id": "Alice Pairwise Verkey", "type": "RsaVerificationKey2018",  "owner": "did:sov:1234abcd","publicKeyPem": "-----BEGIN PUBLIC X…"},
        {"id": "Alice Agency Verkey", "type": "RsaVerificationKey2018",  "owner": "did:sov:1234abcd","publicKeyPem": "-----BEGIN PUBLIC 9…"},
        {"id": "Alice Agent Pairwise Verkey", "type": "RsaVerificationKey2018",  "owner": "did:sov:1234abcd","publicKeyPem": "-----BEGIN PUBLIC A…"}
      ],
      "authentication": [
        {"type": "RsaSignatureAuthentication2018", "publicKey": "did:sov:1234abcd#4"}
      ],
      "service": [
        {
          "id": "did:example:123456789abcdefghi;did-communication",
          "type": "did-communication",
          "priority" : 0,
          "recipientKeys" : [ "Alice Pairwise Verkey" ],
          "routingKeys" : [ "Alice Agency Verkey", "Alice Pairwise Agent Verkey" ],
          "serviceEndpoint" : "https://example.com/endpoint"
        }
      ]
    }
  }
}

end note

Bob -> Bob
note right
Bob decrypts `connection_request` and generates `connection_response` for Alice.
end note

== Connection Response ==

Bob -> AliceAgency: Send `encrypted_fwd_response` to `serviceEndpoint` taken from `connection_request`

note right
encrypted_fwd_response = <pack(forward_message, Alice Agency Verkey)>

forward_message = {
  "@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/routing/1.0/forward",
  "to"   : "Alice Pairwise Agent Verkey",
  "msg"  :  encrypted_forward_inner_message
}
end note

AliceAgency -> AlicePairwiseAgent: forward `encrypted_forward_inner_message`

AlicePairwiseAgent -> AlicePairwiseAgent:
note left
encrypted_forward_inner_message = <pack(forward_inner_message, "Alice Pairwise Agent Verkey")>

forward_inner_message = {
  "@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/routing/1.0/forward",
  "to"   : "Alice Pairwise Verkey",
  "msg"  :  encrypted_response
}
end note

AlicePairwiseAgent -> AlicePairwiseAgent: stores encrypted_response in the queue.

AlicePairwiseAgent <- Alice: `vcx_connection_update_state` all next steps are hidden in this call
AlicePairwiseAgent <- Alice: get all messages {'status': 'Received'}
AlicePairwiseAgent -> Alice: [ encrypted_response ]
Alice -> Alice: decrypt and process `response`
note left
encrypted_response = <pack(connection_response, "Alice Pairwise Verkey", "Bob Pairwise Verkey")>

connection_response = {
  "@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/didexchange/1.0/response",
  "@id": "12345678900987654321",
  "~thread": {
    "thid": "<The Thread ID is the Message ID (@id) of the first message in the thread>"
  },
  "connection": {
    "did": "Bob Pairwise DID",
  	"did_doc": {
      "@context": "https://w3id.org/did/v1"
      "id": "did:sov:1234abcd",
      "publicKey": [
        {"id": "Bob Pairwise Verkey", "type": "RsaVerificationKey2018",  "owner": "did:sov:1234abcd","publicKeyPem": "-----BEGIN PUBLIC X…"},
        {"id": "Bob Agent Verkey", "type": "RsaVerificationKey2018",  "owner": "did:sov:1234abcd","publicKeyPem": "-----BEGIN PUBLIC A…"}
      ],
      "authentication": [
        {"type": "RsaSignatureAuthentication2018", "publicKey": "did:sov:1234abcd#4"}
      ],
      "service": [
        {
          "id": "did:example:123456789abcdefghi;did-communication",
          "type": "did-communication",
          "priority" : 0,
          "recipientKeys" : [ "Bob Pairwise Verkey" ],
          "routingKeys" : [ "Bob Agent Verkey" ],
          "serviceEndpoint" : "did:example:xd45fr567794lrzti67;did-communication"
        }
      ]
    }
  }
}
end note

Alice -> AlicePairwiseAgent: update messages status

== Ack ==

Alice -> Bob: `encrypted_fwd_ack` message.
note left
forward_message = {
  "@type" : "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/routing/1.0/forward",
  "to"   : "Bob Pairwise Verkey",
  "msg"  : encrypted_ack
}

encrypted_fwd_ack = <pack(forward_message, Bob Agent Verkey)>

ack = {
    "@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/notification/1.0/ack",
    "@id": "5678876542345",
    "status": "OK",
    "~thread": {
      "thid": "<The Thread ID is the Message ID (@id) of the first message in the thread>"
    },
  }

encrypted_ack = <pack(ack, Bob Pairwise Verkey, Alice Pairwise Verkey)>
end note

Bob -> Bob: decrypt and process `ack` message

@enduml