var fs = require('fs')
var path = require('path')
var apiFunctions = require('./apiFunctions')

var OUT_FILE = path.resolve(__dirname, '../src/index.js')

var js = ''

js += `// NOTE: this file is generated by codegen/js.js

var capi = require('bindings')('indynodejs')
var wrapIndyCallback = require('./wrapIndyCallback')

function toJson (val) {
  if (val === null || val === void 0) {
    return null
  }
  if (typeof val === 'string') {
    return val
  }
  return JSON.stringify(val)
}

function fromJson (val) {
  if (typeof val === 'string' && val !== '') {
    try {
      return JSON.parse(val)
    } catch (e) {
    }
  }
  return val
}

var indy = {}

indy.capi = capi // if you want to skip the json dance, IndyError, and promise support

`

apiFunctions.forEach(function (fn) {
  js += 'indy.' + fn.jsName + ' = function ' + fn.jsName + ' ('
  fn.jsParams.forEach(function (arg) {
    js += arg.jsName + ', '
  })
  js += 'cb) {\n'
  js += '  cb = wrapIndyCallback(cb'

  if (fn.jsName === 'listPairwise') {
    // indy_list_pairwise returns an array of json strings
    js += ', function (data) {\n'
    js += '    return fromJson(data).map(fromJson)\n'
    js += '  }'
  } else if (fn.jsCbParams.length === 1 && fn.jsCbParams[0].json) {
    js += ', fromJson'
  } else if (fn.jsCbParams.length > 1) {
    if (fn.jsCbParams.find(p => p.json)) {
      js += ', function (data) {\n'
      js += '    return [' + fn.jsCbParams.map(function (p, i) {
        return p.json
          ? 'fromJson(data[' + i + '])'
          : 'data[' + i + ']'
      }).join(', ') + ']\n'
      js += '  }'
    }
  }

  js += ')\n'
  js += '  capi.' + fn.jsName + '('
  fn.jsParams.forEach(function (arg) {
    if (arg.json) {
      js += 'toJson(' + arg.jsName + '), '
    } else if (arg.optional && arg.type === 'indy_i32_t') {
      js += arg.jsName + ' == null ? -1 : ' + arg.jsName + ', '
    } else {
      js += arg.jsName + ', '
    }
  })
  js += 'cb)\n'
  js += '  return cb.promise\n'
  js += '}\n\n'
})

js += 'module.exports = indy\n'

fs.writeFileSync(OUT_FILE, js, 'utf8')
