package org.hyperledger.indy.sdk.crypto;

import org.hyperledger.indy.sdk.IndyIntegrationTestWithPoolAndSingleWallet;
import org.hyperledger.indy.sdk.InvalidStructureException;
import org.hyperledger.indy.sdk.wallet.WalletValueNotFoundException;
import org.junit.Test;

import java.util.Arrays;
import java.util.concurrent.ExecutionException;

import static org.hamcrest.CoreMatchers.isA;
import static org.junit.Assert.assertTrue;

public class CryptoBoxOpenTest extends IndyIntegrationTestWithPoolAndSingleWallet {

	@Test
	public void testCryptoBoxOpenWorks() throws Exception {
		String myVk = Crypto.createKey(wallet, MY1_IDENTITY_KEY_JSON).get();
		byte[] decryptedMessage = Crypto.cryptoBoxOpen(wallet, myVk, VERKEY_TRUSTEE, ENCRYPTED_MESSAGE, NONCE).get();
		assertTrue(Arrays.equals(MESSAGE, decryptedMessage));
	}

	@Test
	public void testCryptoBoxOpenWorksForUnknownMyKey() throws Exception {
		thrown.expect(ExecutionException.class);
		thrown.expectCause(isA(WalletValueNotFoundException.class));

		Crypto.cryptoBoxOpen(wallet, VERKEY_MY1, VERKEY_TRUSTEE, ENCRYPTED_MESSAGE, NONCE).get();
	}

	@Test
	public void testCryptoBoxOpenWorksForOtherCoder() throws Exception {
		thrown.expect(ExecutionException.class);
		thrown.expectCause(isA(InvalidStructureException.class));

		String myVk = Crypto.createKey(wallet, MY1_IDENTITY_KEY_JSON).get();
		Crypto.cryptoBoxOpen(wallet, myVk, VERKEY_MY2, ENCRYPTED_MESSAGE, NONCE).get();
	}

	@Test
	public void testCryptoBoxOpenWorksForNonceNotCorrespondMessage() throws Exception {
		thrown.expect(ExecutionException.class);
		thrown.expectCause(isA(InvalidStructureException.class));

		byte[] nonce = {46, 33, - 4, 67, 1, 44, 57, - 46, - 91, 87, 14, 41, - 39, 48, 42, - 126, - 121, 84, - 58, 59, - 27, 51, - 32, - 23};

		String myVk = Crypto.createKey(wallet, MY1_IDENTITY_KEY_JSON).get();
		Crypto.cryptoBoxOpen(wallet, myVk, VERKEY_TRUSTEE, ENCRYPTED_MESSAGE, nonce).get();
	}
}
