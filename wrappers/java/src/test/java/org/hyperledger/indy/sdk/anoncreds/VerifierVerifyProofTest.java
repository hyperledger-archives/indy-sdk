package org.hyperledger.indy.sdk.anoncreds;

import org.json.JSONObject;
import org.junit.Test;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

public class VerifierVerifyProofTest extends AnoncredsIntegrationTest {

	private String credentialDef = "{" +
			"\"ver\":\"1.0\"," +
			"\"id\":\"NcYxiDXkpYi6ov5FcYDi1e:3:CL:NcYxiDXkpYi6ov5FcYDi1e:2:gvt:1.0\"," +
			"\"schemaId\":\"NcYxiDXkpYi6ov5FcYDi1e:2:gvt:1.0\"," +
			"\"type\":\"CL\"," +
			"\"tag\":\"tag1\"," +
			"\"value\":{" +
			"   \"primary\":{" +
			"       \"n\":\"90502901707537035761603359102972927015094344887671608473563048546399318843145854729384094097125880227799866026686300876969620244718571706730630487142817674697452073102192752051196060218926539989778592290630647177519178436533550223192561612158583048899284958551027127491141688406309178312794479780395092575529229581812915117683391971563795764029072562826012120146268791587368268338520038265414770129610741281171523320475100949367313774276668340383295318400111641358742963591754301429669639739223276118497403061859733977429014695728224361571918732882994520863331988259643585231391945606660054756033475349888553941871633\"," +
			"       \"s\":\"16079962022659642737880964308643040221633375727852777540249619868840748934687121177414651291735970733576960001100180719510833447376696752277655175973441390852386058061170594932412173680294856832311652446995095913574755665567745465686396848383240740664114091353792807986565022495145896045788870387268736558441959279315923694455427502320687382690021420146475094177438209232661180741720855857843514388139350603712554963424551589126819364616676401858453942584469027422300566517144646923043579406863141239816535111900942376620245748820776057212827542177399935672608318267248510734088467154880819001925249876010542136306400\"," +
			"       \"r\":{" +
			"           \"height\":\"31650208165261227377582116230245251505068622293801640684361082928520824724406884584685159593590813236268329017239969546482280457802950573283561913634594848517386238804573309808905504307481588276481820827403639037429749442116509624667553788725638502484107121144435446866347658791104179209435492588670467158628431265575648717871122377080353563202414848273874552691958458236385620435223102274748276788837012392197235563544685203067504076860625713864127996091204010848082028953001163129123709636237311103291716277712943137073550588599516789839253241030742599543909335575346250521011625231258731414192246742443383607392353\"," +
			"           \"master_secret\":\"74679274886814353719555937676742740317459761538012406648265688344083642186728001620347452439699203115723381351613475618431966057932178657857117361447274584171186778770304908019594060793992002196212535357638829127663486981707489828802327476646573525286190387752128700845093362195167066424997286542820756737340566261729954191777430103373839280177568949985025382215332556527855775245772072178452908166233286496100723181580844264722375994554306471982550429097017409567333847912047614528965232214222404971516665673879637383929894860792676415489215171323954742672787316658285896640897826795013878488970435518403749049188353\"," +
			"           \"name\":\"33198767640741246930732453225834809433716992853259764548974545059463451498495370944201487887577242158790872065273587058509043320166570197911039666897121870464040484153770146990367615634597523645329269987339281350967912586139844312971300310087112199839294332951144954113948567853589201207544861118788964341821364710468640981063367399342595422747985253624731912725252503684550929412607786901313147325778843368012563048552834546671508039915246050597697657885568903742662447255139428616451850587769858680830492305556158510957477548133237644367698056000691277015718859479619417702688772234819439341248413782985264316110905\"," +
			"           \"age\":\"61525076208718615759927510394677547801851312063294988146503553020744199866454917195962908989889745217693077918345124053832017576211047794675880350429370120232936677552853759068244989356069255467942362804273782285103067198688566667012545402665399307841433911777648347757866650198470817782960437084413924187108698242096752447418865739647157418558583210979951983242270462647920858888633037859837988695336031617362457607939461602723616600293190667438448629853566541591474937732673768602190133588621597183776382214208417168313856191737259569366765904630316093083150241316585481424313293043841306375238240194067140161501557\"," +
			"           \"sex\":\"54772315956779183828438137197803114690721477816629422239263906750466695709783032065525967692586100899340078769903359930530709315603870023175191564991469974340416845558602185159362438249926836436454710457963138142120320476411269053046421897005573038041108114634096448485001671707627035969962653941768011592131549658598657111294220194340855201357465534768629408210193234716297662604975296864594967277003731322553137209262390016566287407240989710848376524240514807688179007828842875344712404597199185758782456373957737246283533386066033482510820680564590716188940090725528668760706100620073888573678184320449789671579510\"" +
			"       }," +
			"       \"rctxt\":\"76892043260555894770560400084557663478280447194126340117817641017140640839192728431445419660424386224267486001064942189809740481384838882411264356253632632932965850200101888447172439394420401738038416096015409633619548420198150158905416580861958047764687147320966286034552119622249985091598103130044556399579944606980932700636974450045081162085975548457797751885303046348381756432637289539317901776994168150715295389809286199016245338504145512251948980299662593016106896308538559864722157477100590286404096504818259680338494320107571926742939358273269863350713300942114380241358256572728884894084242845802773245211768\"," +
			"       \"z\":\"50743545657776898907335487912248014894865817755898232883786985746684155475271365940248406597150335135169332914195448975261214427097056816340864933148634575536150568257691651094002821775602888479753654854953792640670179868381456147016548946433865690642039359615076183826285025149789692446822192607695101269741556565178163780430767239399304233408281868228220155212856433055209168521403567512151187905178836660278360220310645931105887197070627670695751278747608818466727463722803244270793543114276039056615826012529839350299457624142251892920028939700750556810870977181572515459663715332219809305085763629805615634287917\"" +
			"   }" +
			"}}\n";
	private String proofJson = "{" +
			"\"proof\":{" +
			"   \"proofs\":[" +
			"       {" +
			"           \"primary_proof\":{" +
			"               \"eq_proof\":{" +
			"                   \"revealed_attrs\":{\"name\":\"1139481716457488690172217916278103335\"}," +
			"                   \"a_prime\":\"43327609500152908428687962171696405871707571667204761124012842119343153099783235160599162496493301885875638169683057270045881750225483651557366417167650957594365349026909948144814639502433987704349454784281894657004346106199563684088673987193121289853246856661528282530099192375683019699636368604465115373192003639576141258475744093922741603046560946878870177953983101843587195740439104717972863308559418798846125318316332522236151860187400386341390510882589866504268064174055710854378652450019043254630091715307262736209176850043076770448053729356651112131132578260073395587639570277942508624930736320251752663210038\"," +
			"                   \"e\":\"79037721147976537410527732133494629735677017273969343145245263012714594693437362688523597880300140255260627266512904124527635100641418317\"," +
			"                   \"v\":\"214225813157112220338299191272659603692918476031192864724847351567150114489777357244743651234241043839153479057692446807908027931427597739215418806902834161845020185008615410052615653180413393749282819481250403708378344731005565322211265935695209198027753556039025336903504697160864083626575197039677705701641040296292558766806691483181225948020321391505693630467735638015153103952143908012250058645199469678300451674336390914532483774619703005805190003628501661923662438899648255201991061960266732222957328471450275898389749105465945937191212333717344581877678929228700511369857340716579227571338592527229506438872104750967328270843803308898206523975751175942816697074056831209189143623615256223703100311777501519190037096358239111454134975888395882678989715066789827440034156747702420360267861722395291167923269675242299767965128365711248493962877200080961604268254063822608912891870474856619142825207031067815845825840\"," +
			"                   \"m\":{\"master_secret\":\"8166706406337265746410080683947840789411493595228812517273034968361634232630990342290143920223422316951023754697867665512030988006075007020458652847790129251563145498413730080038\",\"age\":\"6373638952233761580551986622562857053353409992743861082015837561463411483032103805526916969445625140770087167956924144944168419597634075434714755580877413025763490684471063075702\",\"sex\":\"4157618527711441550812711354620679606088848728791239625735174950980410117013192701472665366162706066037025180214168116271733116296660860521399539876318249516375349103711237907683\",\"height\":\"5784630554176837045550266770433185481185841832148891699617962470689880934864768122034725317085799414380037250478160489805053263774167522729570992256981057796091121322441547650043\"}," +
			"                   \"m2\":\"7829424341636852104685077778976128918618602580444249022507920565573285240201734319190283324898190158016888293926901799073594151932615944951493921028520308567066541810861735308129\"" +
			"               }," +
			"               \"ge_proofs\":[]" +
			"           }," +
			"           \"non_revoc_proof\":null" +
			"       }" +
			"   ]," +
			"   \"aggregated_proof\":{" +
			"       \"c_hash\":\"94928500966171184580282772603025462450965970926914190910851357668731871173513\"," +
			"       \"c_list\":[[1,87,56,133,10,65,186,34,119,18,230,17,147,209,124,179,28,175,7,205,214,218,65,244,31,138,193,126,136,136,123,91,1,185,64,164,64,252,222,87,233,164,69,103,212,41,186,138,107,134,42,0,100,192,153,11,24,254,7,6,0,240,140,57,118,40,118,147,165,152,123,37,115,252,90,68,147,99,65,125,139,25,53,23,210,175,229,213,64,128,158,109,70,229,28,89,178,115,184,67,203,137,40,236,42,91,47,139,179,6,80,59,255,170,150,70,163,42,200,70,187,176,50,38,49,14,221,253,244,193,177,154,136,76,41,232,54,114,162,230,110,165,186,235,218,150,247,243,51,87,6,224,167,175,124,6,176,182,237,152,20,40,248,113,65,148,243,53,78,35,55,137,103,82,188,112,184,87,236,140,136,198,153,202,146,121,123,1,127,76,208,181,155,111,163,13,168,143,24,124,0,104,140,139,235,180,247,75,230,145,230,82,125,198,143,132,40,173,129,199,34,118,23,226,163,173,136,69,162,137,31,242,47,71,40,2,207,206,234,108,43,181,232,19,172,0,176,132,7,51,124,1,152,4,239,216,54]]" +
			"       }" +
			"   }," +
			"   \"requested_proof\":{" +
			"       \"revealed_attrs\":{\"attr1_referent\":{\"sub_proof_index\":0,\"raw\":\"Alex\",\"encoded\":\"1139481716457488690172217916278103335\"}},\"self_attested_attrs\":{},\"unrevealed_attrs\":{},\"predicates\":{}},\"identifiers\":[{\"schema_id\": \"\",\"cred_def_id\": \"\",\"rev_reg_id\":null,\"timestamp\":null}" +
			"   ]" +
			"}\n";

	private String verifierProofRequest = new JSONObject("{\n" +
			"                   \"nonce\":\"123432421212\",\n" +
			"                   \"name\":\"proof_req_1\",\n" +
			"                   \"version\":\"0.1\", " +
			"                   \"requested_attributes\":{" +
			"                          \"attr1_referent\":{\"name\":\"name\"}" +
			"                    },\n" +
			"                    \"requested_predicates\":{}" +
			"               }").toString();

	@Test
	public void testVerifierVerifyProofWorksForCorrectProof() throws Exception {
		String schemasJson = new JSONObject().put(gvtSchemaId, new JSONObject(gvtSchema)).toString();
		String credentialDefsJson = new JSONObject().put(issuer1gvtCredDefId, new JSONObject(credentialDef)).toString();
		String revocRegDefsJson = new JSONObject().toString();
		String revocRegsJson = new JSONObject().toString();

		proofJson = proofJson.replace("\"schema_id\": \"\"", String.format("\"schema_id\": \"%s\"", gvtSchemaId));
		proofJson = proofJson.replace("\"cred_def_id\": \"\"", String.format("\"cred_def_id\": \"%s\"", issuer1gvtCredDefId));

		Boolean valid = Anoncreds.verifierVerifyProof(verifierProofRequest, new JSONObject(proofJson).toString(), schemasJson, credentialDefsJson, revocRegDefsJson, revocRegsJson).get();
		assertTrue(valid);
	}

	@Test
	public void testVerifierVerifyProofWorksForWrongProof() throws Exception {

		String schemasJson = new JSONObject().put(gvtSchemaId, new JSONObject(gvtSchema)).toString();
		String credentialDefsJson = new JSONObject().put(issuer1gvtCredDefId, new JSONObject(credentialDef)).toString();
		String revocRegDefsJson = new JSONObject().toString();
		String revocRegsJson = new JSONObject().toString();

		proofJson = proofJson.replace("\"schema_id\": \"\"", String.format("\"schema_id\": \"%s\"", gvtSchemaId));
		proofJson = proofJson.replace("\"cred_def_id\": \"\"", String.format("\"cred_def_id\": \"%s\"", issuer1gvtCredDefId));
		proofJson = proofJson.replace("9492850096", "1111111111");

		Boolean valid = Anoncreds.verifierVerifyProof(verifierProofRequest, new JSONObject(proofJson).toString(), schemasJson, credentialDefsJson, revocRegDefsJson, revocRegsJson).get();
		assertFalse(valid);
	}
}
