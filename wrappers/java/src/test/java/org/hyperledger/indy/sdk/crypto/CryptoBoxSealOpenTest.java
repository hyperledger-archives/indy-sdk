package org.hyperledger.indy.sdk.crypto;

import org.hyperledger.indy.sdk.IndyIntegrationTestWithPoolAndSingleWallet;
import org.hyperledger.indy.sdk.InvalidStructureException;
import org.hyperledger.indy.sdk.wallet.WalletValueNotFoundException;
import org.junit.Test;

import java.util.Arrays;
import java.util.concurrent.ExecutionException;

import static org.hamcrest.CoreMatchers.isA;
import static org.junit.Assert.assertTrue;

public class CryptoBoxSealOpenTest extends IndyIntegrationTestWithPoolAndSingleWallet {

	@Test
	public void testCryptoBoxSealOpenWorks() throws Exception {
		String verkey = Crypto.createKey(wallet, MY1_IDENTITY_KEY_JSON).get();
		byte[] encryptedMessage = Crypto.cryptoBoxSeal(verkey, MESSAGE).get();
		byte[] decryptedMessage = Crypto.cryptoBoxSealOpen(wallet, verkey, encryptedMessage).get();
		assertTrue(Arrays.equals(MESSAGE, decryptedMessage));
	}

	@Test
	public void testCryptoBoxSealOpenWorksForOtherKey() throws Exception {
		thrown.expect(ExecutionException.class);
		thrown.expectCause(isA(InvalidStructureException.class));

		String verkey = Crypto.createKey(wallet, MY1_IDENTITY_KEY_JSON).get();
		byte[] encryptedMessage = Crypto.cryptoBoxSeal(VERKEY_TRUSTEE, MESSAGE).get();

		Crypto.cryptoBoxSealOpen(wallet, verkey, encryptedMessage).get();
	}

	@Test
	public void testCryptoBoxSealOpenWorksForUnknownKey() throws Exception {
		thrown.expect(ExecutionException.class);
		thrown.expectCause(isA(WalletValueNotFoundException.class));

		byte[] encryptedMessage = Crypto.cryptoBoxSeal(VERKEY_MY1, MESSAGE).get();
		Crypto.cryptoBoxSealOpen(wallet, VERKEY_MY1, encryptedMessage).get();
	}
}
