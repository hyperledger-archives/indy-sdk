#import "AnoncredsUtils.h"
#import "TestUtils.h"

@interface AnoncredsUtils ()

@property(assign) BOOL isCommonWalletCreated;
@property(assign) IndyHandle walletHandle;
@property(strong) NSString *singletoneCredentialdefJson;
@property(strong) NSString *singletoneCredentialofferJson;
@property(strong) NSString *singletoneCredentialreqJson;
@property(strong) NSString *singletoneCredentialJson;

@end

@implementation AnoncredsUtils


+ (AnoncredsUtils *)sharedInstance {
    static AnoncredsUtils *instance = nil;
    static dispatch_once_t dispatch_once_block;

    dispatch_once(&dispatch_once_block, ^{
        instance = [AnoncredsUtils new];
        instance.isCommonWalletCreated = false;
        instance.walletHandle = 0;
    });

    return instance;
}

// MARK: - Json configurators

- (NSString *)defaultCredentialDefConfig {
    return [self toJson:@{@"support_revocation": @NO}];
}

- (NSString *)getGvtSchemaId {
    return @"NcYxiDXkpYi6ov5FcYDi1e:2:gvt:1.0";
}

- (NSString *)getGvtSchemaJson {
    return [self toJson:@{
            @"id": [self getGvtSchemaId],
            @"ver": @"1.0",
            @"name": [TestUtils gvtSchemaName],
            @"version": [TestUtils schemaVersion],
            @"attrNames": @[@"age", @"sex", @"height", @"name"]
    }];
}

- (NSString *)getIssuer1GvtCredDefId {
    return @"NcYxiDXkpYi6ov5FcYDi1e:3:CL:NcYxiDXkpYi6ov5FcYDi1e:2:gvt:1.0";
}

- (NSString *)getGvtCredentialValuesJson {
    return [self toJson:@{
            @"sex": @{
                    @"raw": @"male",
                    @"encoded": @"5944657099558967239210949258394887428692050081607692519917050011144233115103"
            },
            @"name": @{
                    @"raw": @"Alex",
                    @"encoded": @"1139481716457488690172217916278103335"
            },
            @"height": @{
                    @"raw": @"175",
                    @"encoded": @"175"
            },
            @"age": @{
                    @"raw": @"28",
                    @"encoded": @"28"
            }
    }];
}

- (NSString *)getXyzCredentialValuesJson {
    return [self toJson:@{
            @"status": @{
                    @"raw": @"partial",
                    @"encoded": @"123455672645217415414"
            },
            @"period": @{
                    @"raw": @"8",
                    @"encoded": @"8"
            }
    }];
}

- (NSString *)getGvt2CredentialValuesJson {
    return [self toJson:@{
            @"sex": @{
                    @"raw": @"male",
                    @"encoded": @"3423574238417531735213261554781254821457218541265418245812541274517645176"
            },
            @"name": @{
                    @"raw": @"Alexander",
                    @"encoded": @"245372858126541862352154819291254612"
            },
            @"height": @{
                    @"raw": @"170",
                    @"encoded": @"170"
            },
            @"age": @{
                    @"raw": @"28",
                    @"encoded": @"28"
            }
    }];
}

- (NSString *)credentialId1 {
    return @"credentialID1";
}

- (NSString *)credentialId2 {
    return @"credentialID2";
}

// NOTE: for Anoncreds test
- (NSString *)gvtCredDef {
    return [NSString stringWithFormat:@"{\n"
                                              "        \"id\": \"%@\",\n"
                                              "        \"ver\": \"1.0\",\n"
                                              "        \"schemaId\": \"%@\",\n"
                                              "        \"type\": \"CL\",\n"
                                              "        \"tag\": \"TAG_1\",\n"
                                              "        \"value\": {\n"
                                              "            \"primary\": {\n"
                                              "                \"n\": \"98206882360971928369196105915435152527421956254937750475519267499007806663391571745484918982656093953343286311715548338386494827455950694504247990618614540419719453821052280488939560651768030023102922820022379607954311939968228869879319131861698867825538440885652224664797521755146985516082218573248868494259134372222451038634416706505724369699221157072214834080250647666971872365320719129818653651393802166817972469916801549123118785068276179352018046467135720349194185079737083023041289485895659600718780884897144649124680774354249625885140765757058565747007750287241711870659835903274623276781539864049164047211293\",\n"
                                              "                \"s\": \"61355798642237969535831640161382793364508530051127861297543308153275544436705256345547159693357456886759605659527594585887008007925479262045693906803523614229369431018781715080548074679180844984156237718326043756282619909771415031659237808334078917672023307978006447478064113502482427755418102866946546269241478790365574406112581680340823843385185183546436420545318109544663205976811848080462267091699497986826292068407090980481248864817900641618075334981878600450301644015232311133269714264095563618016925650484800967029924171823347865765870910530664369947765943509373402197002400734850531391943703675161079118595940\",\n"
                                              "                \"rms\": \"91503921556334093243681583905976809372147290567533229401566644509255303788560246979515739903411793120717460448520717663988803817275596788232191777969503727045208285929150590155772700102563663858621498558087459402754932839570079001200452738216980374822081249180129868989388615063555529743431180783535737776204867267180307434564503960837581775139881330438613791067455484379261699228902179153811604076533687497101880764157033741703439790821706460778846848228072123914596814264361963425857076366199857712468880297408555332148592410108885650806402624105552371004821241073612284744310482873722439882300555294717653278604358\",\n"
                                              "                \"r\": {\n"
                                              "                    \"age\": \"62436888527497266562241632168895963239884040168488645775808670145385847001383105067174675710288799460197494381313313874575635822060710638304599206163867687680833746741024307035600574385421369643343662643945148302821718334129041567650003532026492030969733075343961045095979286842967526971994726316286155053569740176740451724473202516953091029768616601779644803704630966281326921022004818765633434771934622925065943660784946909601001488078466299460754498413648749376316894517385395279057235563709069691612880775831876446142317330879392906696251094683074099707589933967066995940844123816756857099105868409019345112685552\",\n"
                                              "                    \"sex\": \"91837235575630719252776129914807536685557223878543031469876692127116765922362701818772482185024900450179892491308055930560939840598411926406853735110788073498999087882794558156889089332048370514627720061325694549285422823909646710469941808077303198792460536908281828588007433374086338597982302391946193743698907895126247236896651417345498586845580947151631050288154263362870887793632458026512529794661907864100793109593540442374176964831877718668877291263537312045023613461663675397132148432132319821045347763477548464484005494684721268788612209503855451814551800847731754288211693571462715399946321792530201844812686\",\n"
                                              "                    \"name\": \"94557655970359763071788298994776595106356264395111381095163812816109912149854488830327543060428891262387326543721348922460316395451650435884138229041558375546613960138555573276884141928832868170334977037872366527513274114180153379086686059140667211974844760063773558887702128603735814058929919777811148353228018276072746364445003323447169681783619899050545894824379123918967224382268784862546432232442834009026493297357753623375904195826613376758637378850798144844411649023843003128925963090557681135370493459679213244332718594628087968682793895163863141947605851977382741148160048182891844287673727936943443834324975\",\n"
                                              "                    \"height\": \"65760409986513807165277067452238625602976282305489225269386540909947038689327730067847178236316825930326230704731494170607006727044592127723801615060646637991655927543097004820911920716894249811571307235993294584276975802420953280698796275154998808491585671614097340325078715285084675318300554352915213325703575941251354023032753296280266910970115248650392935524541072273617029667155708974651547317982107796941861730875865684900063727040708804585467197015885592334850761627410862918261928841755969596053205667891719965229172154378144043871384017706872070570992615652651060786262382908812242083305484280790695205708133\"\n"
                                              "                },\n"
                                              "                \"rctxt\": \"64984441431268925979196377380511974816339019734721341180866656405225558036171558067242362547190094022337034274803836405948165851254119954947006444637326414912875339858550844011168978691484696961999842771571312435052336451643667618359805260080143191742053817319692189519472131082545397130443799403747021428224569216375890502605632741250598169212759616162819568658640169282763002116726420569662467202356557648248991423175162111894410406680221439525944495227782491979333795011609010368858193175237730719831361148948713702970385661350256899628598517067042362015272658080877100053818295366602497539363914947703328053386207\",\n"
                                              "                \"z\": \"20977594959882886944229500446794250461964739183115113198513639888383026989086068574412764868069956167376187055226682817778158846146382758624367900490778639035562836376766741551367340858579892597295831159905085954084212051112711220116374593052724380409815637162198417152319592062839875229752550092814919229083873591540538467864261567046839734744502456586530200275598560478105666411537423297921523555725933156406112257304862257815965664553158073946973447703637389492121877656875734443980093764336494058929440511963192385776971895497620503302088020390842302066281149985107038828180003693367004171601521516868536976425411\"\n"
                                              "            }\n"
                                              "        }\n"
                                              "    }", [[AnoncredsUtils sharedInstance] getIssuer1GvtCredDefId], [[AnoncredsUtils sharedInstance] getGvtSchemaId]];
}

- (NSString *)proofJSON {
    return [NSString stringWithFormat:@"{\n"
                                              "    \"proof\": {\n"
                                              "        \"proofs\": [\n"
                                              "            {\n"
                                              "                \"primary_proof\": {\n"
                                              "                    \"eq_proof\": {\"revealed_attrs\": {\"name\": \"1139481716457488690172217916278103335\"},\n"
                                              "                                 \"a_prime\": \"32089897157624832283198840330786910110050115462404692473042266562047233306881984826607216499704819585468096701786563714255392673804592236977738599008156478505291804895531838867671647228339551778188764449991774915449415603679783675099147045838748688813672813723951835058216297685747794020068221461614764672229563576867413468802583141327218425244074002491444987846984969817304170993334278665337262603023542986071231355693275614904300468383752821369831826330280535517475082742504608755478405454944010312503168503634635794723930449541425848383731272150901744330742972522735729709517623849758535239888191498346331084325668\",\n"
                                              "                                 \"e\": \"74605605760901549552778232007305625162477324000566957825133523835888855284958109689356931911407175433523313833583170689527536892157994574\",\n"
                                              "                                 \"v\": \"68748441900049854379976505817330811103953796692705615687884382980120359110280680129955313481554309958292034017596131025936998653474166978368347851164067657749669489135049014879544113019726774335115742918411313035246976019684518583686321801961882749120382671688101698364974254539821990867291618005244451244106387157628277298319198358130544390977889714141807077913543569168655502324701618904915547719768923203544317823848379625976651163929622596371440005429928589141555504442698803878892651948196159639723941768293144806961476659838402889303216028106009145195770820185644719952964634154379122778194000776344890154072489098275094214434084170105848006068360736237526180036192595521189437961011661514783760538221856945406126278634911209417059137956649707294778023512985749025965213314427019423074981393144986642232591954110616913761084221225422471534207221057376579765109096676609072525147704853000280805999274719985232435301\",\n"
                                              "                                 \"m\": {\n"
                                              "                                     \"age\": \"655443106470818200737541753046084124880166064786557856082292213751364105532647074213842533033826105166532587076989974783153736263866385415232244553018260770376235720905333495078\",\n"
                                              "                                     \"sex\": \"231103152386517447297181981502359530820722059705112383025739536379017154517702446522489719997434908402513914184375284507575861796027037039952308473904457067178116103423002356683\",\n"
                                              "                                     \"height\": \"12094056995119092754590493466536382109909561746888466418183355127436098659050161169409824787228354288615381080540725393264051394129824268302596979911375991166807267955016470155493\"},\n"
                                              "                                 \"m1\": \"7754305522386025105064484040123000963089265136864898662502350511149379216329047088334080451886528879678140997675189952127483692078747570774133081717573611238366112948263156012699\",\n"
                                              "                                 \"m2\": \"16044144085434730416865020385335481531077693293358426212318326539351335783519680705192452684988089128788119383825003957724721902542423323521323470231520254580965314630468032585032\"},\n"
                                              "                    \"ge_proofs\": [{\"u\": {\n"
                                              "                        \"2\": \"1231262787976659380825644140864861629269205683152957901837923968523684379652178984095808731744639225552271851200761392940160009610341872578095970617412357212867633344503482158712\",\n"
                                              "                        \"0\": \"3000901250343906747598465485728030384815296406453544614287894106842594073224667406439900875799176997507789708191293359521296314445840449894505154605226385075290308441623368338290\",\n"
                                              "                        \"3\": \"7351408247455608542584073958600870657552754258067034872028234440943703544510426264414459642783204276359494798633061272812125177751316702247729357654388029624544766293710952723238\",\n"
                                              "                        \"1\": \"15660931428214840803831183982749797736133467031969932038777693967055697879497017643612394035356518454356759955956496886941968270649583484107938982118182408061000035456063009052964\"},\n"
                                              "                        \"r\": {\n"
                                              "                            \"DELTA\": \"1231505491818995077307984616723390137095119537054120030368466684078990185259398949258220658811749374879402191641510116517359715820536117705181879826364468883849870933197787467594844613766164491159874943861982066158060025707163958375647433878049766605411392319915273376862636247599415100969154606341745794286734369155151839938490620358567735682915413071180454102162721622364623824902571635209020200840457399658292565802960611340650970412617672179016378645703452625226415156179772662016874737448465379090204073095379830880790763941126726978623342627103082347133786023229373308420895721663676366025722387869722684036561724158675270587820904286961257090796781620592962735877363730256335211469939751468220094567384334279167\",\n"
                                              "                            \"2\": \"402177197026155274516723970397518471130692196762863203098296756640900603879864150885021230826074802405189368824919950219536983138123946077708286511710000600678798548398449589387087974241773725798881519038295530491143172191013023341129338172273348903939843880565601954850899426346505224370426747933507009265235465062856790323484105363480367145308742353357935212315863817536652719355296609616545762305159570265713363184051297099076778390730800874357728995048818828824017348985889668259796333334977296175134028884139711183017377781220953473642198500213723904363805625518584526583053834625680761199925521802878264813592227551924394788705888617222693364201403939575732996985191651850374517573315763512807661867584087462600\",\n"
                                              "                            \"0\": \"847631804591735677899846242119796023912102445197128086881429369628201776087445265010867307380042760662283023519819673043757960573849186963323414816676725865218884919663741216763413650158516571500427310197182772167328508069269062645022026489605428865685963906555908622123856546640299863700056561468156552423549647275758747950940046174360298945344719494722214275124117828854006479417333986801856823117390034205687322007331990676768880312982904124365099292525085625319618787911938145557556896251122573705470711909015045390892156858608882957357165431826128643246547341425367775185232005033175360320347194807550845607163463273933876377433219075682046012475948230064653817476321480291209581231108142366271618794498305912877\",\n"
                                              "                            \"3\": \"183533515646338662055710969399753107703101577819670285981104581835455068470318853144996144513418284206781967661707018680580238881556909916959953015116591273186253724615391717206835296525452721864502298557476677887168594335118140646653939308064018839940605984145875083572601247872397810237046498732694900355253450476706821921706693784853685368250047439517090432266605854439120749032754760253204828900484916061550788900895951571474107550665393942430767800734575349339484263266931504325541294960055657421135497251310925034509135738953282503605099884071542067664022041798995128430543688175476819334529538014650497097254434109941089293943734223622415198875921749561474887285657716260569881903726684992750510665803115206605\",\n"
                                              "                            \"1\": \"1382744421945206168723212301160050681680260847662826632240974981370272839042150157297126548924575014336126300194439972437247090758629619973550859792594011688120232762959709669559316027482000037071528512918336893410423722348445691379191450599391429083227412253401156467342343912034372366093327539143980056020672606811325764644845467103291274815415357615667150774728094081353401578792608745580972566667379546355454038420661405224500340249599917195914929237594008484056314782013306958772401100844068179325869776989633222177719594764790826760673521694337848168089283939623526047587983417046360385276905115529730720589596359879136293282239557856481518245168217281186831988552027067423688873666148964944618697108329461450130\"},\n"
                                              "                        \"mj\": \"655443106470818200737541753046084124880166064786557856082292213751364105532647074213842533033826105166532587076989974783153736263866385415232244553018260770376235720905333495078\",\n"
                                              "                        \"alpha\": \"66069197856649283943568351903446449194502959377213455274161244507909843550034416741960331534387003674441179829781649377083899693710623427902954491090947873357814884279841004604936895780577221807473801208776591269537729616701314723614512160306447074748110033562341074117243395812959099381480882318482807093769830099662150913391401100490064319813050238023409468211626465927052982200326831585319346305910969257123155815064546263754861300534588053629998248465861820563313194873770898059119634623576943261041774082764238023664215420190729002034700102970702713427279054384855870877243534142772289875815415325451965836060007974512472815623689362692336414636823109072453314727418206754076378466623541246350425984384898210218829758971328315139134409102105839344931902330575100914207425100961939113629683280565389006345343056053049993256846918181791\",\n"
                                              "                        \"t\": {\n"
                                              "                            \"DELTA\": \"81598196133611232554693676584796370302583225357432536592044590424515067501030454907409083974425206320595040117084652929947096193121371524417919836210076759557699839950716910140910444269582385310993810139316115451401729159862342159126476396873014717944509117391076347906050469643501180582091211590281678884360816745275292439155568768481655368799353981226151430948925233555510798844439492077954609938284378725390114226457095658289378019109708397062398395054532543520551827684797312917738060404181212693739410640823502418210889143216477625108629073415241961626406567931508987168033546236670905491204687454980272295840669\",\n"
                                              "                            \"2\": \"41753219564019727410895715373004746480524507193911253940259412756593922134410512818585038667725862558282169053866358797022049239456217434410183718605769933613545933626476912187359966626407324841248522741804187097797026926708492849946699620298911516929757941156705363062523791912204233776857869157030514326050566506271611004540632275378663346576999657788139882852171572460486548041697095579265641851664691789265360456301197146292593370303479112084653078948386443258431776029150944360928793981304007928248956007155617849421338119738890688974229313022497081216099933325432403884653314514271019091716283101957490263383905\",\n"
                                              "                            \"0\": \"59051804674243738875281963040466302751919292931798957462407785779677016254034510306472886844152855153132340774474258846314643172171179126326507035863146036118420647400141322967612440957669809335788876324124123049814982000786495406200139955244950666475179344943359751221290036000292251162093626903272528981981190093672571237756566165931709833331787266200556874431709972516572524445627219927528047340351841405719303431484828429305866686183641584580976193386940541396602757190052424179396653101629794970895952100268440260354341720699978560390767970484330599507874754096386712633844414991000335737590993099441447981045735\",\n"
                                              "                            \"3\": \"93965195328327851914302439412271223831197800548340983119401871502285658929468706537158138439180845761657029496275433169478414280090589874375520070369058692304736308202329206758443815631369618414775938476735809130465642961950351824261763365524562271884341814106564235178274502724346847633124911779118974773211850587683630731405027675701664015958811764484438262735507190309915144680071251923255075252057725911549816410105405107136900060772765741306251450915131930418924909843204287354842880689912639860704751932553010395329436597207803611382838138605085369742297616483528830577355345927237500166003045728349481248206246\",\n"
                                              "                            \"1\": \"95027792038803319934529180153856490766254940623721125770124307082550564342671061178102405930075092919327924624894262952020506142688274341241032007823958298264692741021774675492963792115462834033173362887498627908169138408132011279325710104685120831749551790422741880430029336116894732589415036384575979978709533833491958228375095391095534889664070769581635118979218076686533783367392039334779246786229228116005491850051473130340467669820348607289406497485814363418324569180639237673933592201131066607132354974207225272194464334162549587614144070984078076220405870413471349923182927991660785288638752109965665905359665\"},\n"
                                              "                        \"predicate\": {\"attr_name\": \"age\", \"p_type\": \"GE\", \"value\": 18}}]\n"
                                              "                }\n"
                                              "            }\n"
                                              "        ],\n"
                                              "        \"aggregated_proof\": {\n"
                                              "            \"c_hash\": \"37109754487726516312706799096867789727294572334617395400836171835413734136001\",\n"
                                              "            \"c_list\": [\n"
                                              "                [254, 51, 113, 132, 5, 241, 185, 104, 42, 226, 159, 172, 164, 35, 118, 170, 209, 5, 100, 5, 169,\n"
                                              "                 179, 171, 163, 207, 104, 121, 229, 177, 148, 158, 138, 225, 232, 48, 113, 64, 84, 88, 230, 138, 9,\n"
                                              "                 10, 251, 220, 35, 101, 152, 31, 63, 40, 117, 193, 91, 144, 240, 79, 2, 176, 117, 64, 107, 244, 154,\n"
                                              "                 135, 246, 58, 160, 101, 127, 134, 1, 154, 33, 59, 255, 184, 57, 8, 254, 78, 187, 213, 151, 249,\n"
                                              "                 141, 238, 243, 118, 12, 17, 201, 180, 135, 29, 71, 215, 46, 138, 88, 240, 72, 159, 190, 106, 107,\n"
                                              "                 228, 19, 11, 113, 248, 181, 12, 182, 82, 68, 62, 78, 183, 48, 17, 67, 153, 245, 8, 95, 113, 15, 4,\n"
                                              "                 161, 254, 96, 21, 159, 145, 32, 191, 208, 226, 241, 190, 70, 72, 235, 180, 212, 184, 74, 46, 189,\n"
                                              "                 105, 46, 134, 8, 194, 43, 46, 255, 186, 81, 102, 250, 87, 8, 13, 225, 180, 142, 222, 67, 90, 0,\n"
                                              "                 181, 228, 212, 250, 181, 116, 108, 64, 190, 18, 169, 136, 94, 109, 214, 227, 212, 191, 110, 197,\n"
                                              "                 141, 250, 64, 174, 22, 157, 113, 199, 53, 244, 22, 169, 46, 255, 53, 213, 107, 215, 156, 125, 135,\n"
                                              "                 97, 146, 175, 26, 232, 156, 48, 61, 15, 95, 35, 149, 55, 18, 1, 240, 100, 189, 255, 175, 63, 165,\n"
                                              "                 135, 207, 66, 47, 120, 209, 19, 212, 110, 79, 90, 129, 27, 169, 215, 31, 20, 205, 2, 131, 36],\n"
                                              "                [1, 211, 199, 200, 59, 171, 173, 213, 255, 139, 255, 87, 243, 198, 248, 158, 156, 167, 183, 244,\n"
                                              "                 130, 124, 94, 168, 62, 103, 190, 106, 43, 133, 14, 69, 113, 71, 78, 111, 234, 114, 89, 108, 122,\n"
                                              "                 202, 168, 21, 128, 226, 59, 163, 97, 178, 85, 69, 10, 191, 94, 57, 113, 180, 245, 229, 124, 67,\n"
                                              "                 255, 251, 80, 184, 4, 205, 178, 28, 29, 160, 229, 145, 112, 245, 41, 49, 4, 90, 176, 86, 200, 250,\n"
                                              "                 162, 125, 241, 79, 206, 26, 96, 83, 188, 114, 164, 161, 169, 249, 74, 246, 71, 65, 137, 194, 74,\n"
                                              "                 203, 105, 158, 187, 116, 203, 175, 137, 116, 193, 188, 60, 165, 203, 101, 153, 246, 196, 40, 204,\n"
                                              "                 223, 158, 50, 142, 155, 191, 143, 74, 171, 71, 164, 246, 218, 191, 16, 8, 243, 247, 231, 96, 167,\n"
                                              "                 249, 227, 2, 13, 71, 71, 194, 97, 207, 219, 252, 108, 164, 28, 100, 16, 19, 107, 157, 58, 143, 108,\n"
                                              "                 94, 196, 29, 129, 48, 83, 177, 206, 184, 59, 96, 179, 56, 77, 63, 224, 113, 109, 160, 122, 42, 23,\n"
                                              "                 6, 76, 178, 196, 17, 56, 221, 121, 178, 112, 217, 197, 55, 173, 159, 94, 207, 224, 146, 194, 229,\n"
                                              "                 116, 139, 36, 60, 105, 170, 4, 251, 143, 155, 242, 19, 205, 101, 112, 186, 151, 67, 65, 219, 149,\n"
                                              "                 182, 122, 211, 85, 67, 201, 154, 166, 119, 84, 141, 151, 6, 225, 106, 65, 145, 241, 127, 215, 193,\n"
                                              "                 207, 128, 87, 231],\n"
                                              "                [2, 240, 195, 222, 132, 39, 57, 110, 16, 25, 149, 232, 152, 79, 83, 155, 234, 87, 160, 65, 17, 247,\n"
                                              "                 26, 97, 64, 219, 88, 80, 33, 64, 23, 3, 128, 111, 37, 80, 121, 66, 252, 48, 117, 191, 172, 158,\n"
                                              "                 251, 211, 217, 219, 220, 44, 94, 110, 103, 29, 220, 99, 2, 17, 217, 162, 105, 199, 198, 121, 102,\n"
                                              "                 234, 231, 215, 74, 109, 193, 207, 142, 98, 198, 63, 156, 250, 188, 215, 219, 60, 62, 94, 24, 139,\n"
                                              "                 183, 190, 28, 25, 59, 43, 225, 62, 237, 205, 48, 205, 69, 129, 130, 33, 95, 155, 98, 111, 28, 192,\n"
                                              "                 175, 204, 120, 143, 126, 249, 232, 102, 239, 34, 239, 73, 175, 196, 4, 34, 150, 236, 146, 129, 70,\n"
                                              "                 154, 192, 238, 82, 88, 114, 79, 85, 192, 163, 72, 164, 151, 168, 249, 152, 212, 207, 178, 221, 184,\n"
                                              "                 252, 246, 156, 61, 203, 61, 231, 205, 60, 6, 51, 85, 3, 72, 148, 26, 7, 225, 179, 165, 106, 215,\n"
                                              "                 61, 224, 125, 207, 65, 22, 67, 163, 6, 138, 4, 25, 35, 179, 252, 95, 105, 50, 135, 206, 21, 234,\n"
                                              "                 112, 57, 11, 101, 42, 142, 125, 37, 162, 139, 188, 86, 177, 167, 23, 157, 245, 48, 234, 193, 152,\n"
                                              "                 63, 93, 145, 70, 81, 174, 1, 101, 66, 232, 185, 130, 151, 31, 89, 38, 161, 50, 164, 208, 168, 129,\n"
                                              "                 128, 180, 164, 55, 38, 36, 214, 179, 180, 160, 95, 34, 212, 63, 167, 184, 214, 71, 59, 49],\n"
                                              "                [1, 74, 191, 204, 47, 255, 219, 193, 253, 44, 72, 107, 177, 166, 254, 220, 149, 91, 220, 197, 194,\n"
                                              "                 245, 239, 48, 59, 251, 185, 128, 26, 73, 162, 96, 151, 41, 236, 60, 71, 60, 125, 251, 62, 81, 94,\n"
                                              "                 186, 226, 187, 128, 152, 60, 21, 120, 100, 86, 177, 104, 2, 114, 108, 208, 208, 20, 75, 205, 125,\n"
                                              "                 255, 6, 63, 249, 2, 130, 61, 165, 139, 61, 198, 144, 101, 89, 83, 31, 179, 93, 124, 60, 32, 222,\n"
                                              "                 220, 143, 11, 233, 221, 72, 216, 86, 66, 203, 215, 122, 113, 15, 140, 230, 245, 59, 235, 76, 119,\n"
                                              "                 104, 196, 127, 54, 221, 161, 145, 72, 93, 38, 8, 51, 161, 90, 118, 253, 247, 207, 164, 143, 141,\n"
                                              "                 213, 212, 244, 150, 156, 245, 141, 78, 45, 48, 156, 7, 151, 99, 90, 184, 72, 250, 116, 49, 83, 156,\n"
                                              "                 86, 52, 50, 139, 150, 196, 103, 186, 208, 154, 243, 244, 169, 63, 108, 148, 162, 25, 32, 86, 83,\n"
                                              "                 152, 45, 111, 2, 155, 223, 207, 200, 196, 44, 21, 245, 14, 13, 236, 129, 57, 33, 137, 150, 43, 135,\n"
                                              "                 170, 152, 167, 136, 89, 55, 119, 79, 210, 184, 196, 66, 151, 34, 244, 25, 136, 173, 13, 107, 94,\n"
                                              "                 67, 252, 130, 172, 136, 114, 28, 247, 54, 241, 203, 166, 188, 25, 42, 209, 121, 50, 158, 105, 169,\n"
                                              "                 52, 125, 191, 38, 131, 194, 89, 64, 243, 155, 238, 232, 149, 175, 212, 131, 39, 251, 251, 98, 223,\n"
                                              "                 97],\n"
                                              "                [2, 232, 89, 4, 158, 137, 126, 19, 39, 77, 174, 181, 244, 4, 38, 10, 43, 152, 173, 187, 192, 169,\n"
                                              "                 122, 251, 94, 149, 176, 147, 245, 219, 26, 39, 3, 211, 200, 108, 63, 52, 249, 56, 113, 154, 62,\n"
                                              "                 206, 206, 25, 117, 109, 211, 226, 181, 64, 83, 25, 205, 205, 109, 65, 132, 129, 159, 91, 166, 62,\n"
                                              "                 2, 181, 178, 213, 16, 225, 36, 217, 187, 210, 152, 129, 207, 235, 90, 227, 76, 134, 246, 151, 164,\n"
                                              "                 91, 206, 43, 141, 253, 85, 80, 147, 169, 162, 221, 98, 235, 75, 119, 32, 21, 164, 193, 252, 174,\n"
                                              "                 206, 47, 245, 49, 97, 176, 233, 116, 123, 0, 6, 17, 83, 47, 224, 112, 95, 92, 205, 86, 176, 92, 74,\n"
                                              "                 183, 67, 141, 36, 187, 107, 173, 195, 227, 223, 18, 226, 115, 117, 214, 241, 185, 198, 217, 206,\n"
                                              "                 230, 67, 231, 203, 203, 39, 8, 92, 236, 181, 71, 16, 82, 192, 116, 111, 80, 156, 220, 147, 63, 150,\n"
                                              "                 170, 19, 248, 32, 38, 8, 25, 243, 63, 193, 240, 75, 69, 218, 147, 117, 83, 89, 156, 229, 227, 240,\n"
                                              "                 230, 146, 70, 37, 203, 175, 74, 26, 133, 140, 134, 162, 209, 244, 72, 83, 128, 104, 146, 114, 38,\n"
                                              "                 54, 47, 179, 111, 129, 9, 210, 62, 16, 130, 44, 161, 165, 54, 199, 219, 0, 198, 171, 75, 107, 103,\n"
                                              "                 8, 32, 61, 158, 42, 59, 52, 146, 76, 197, 195, 157, 121, 199, 74, 253, 19, 84, 151, 173, 166],\n"
                                              "                [2, 134, 97, 217, 86, 28, 0, 217, 135, 229, 219, 181, 68, 121, 207, 243, 113, 32, 15, 139, 190, 27,\n"
                                              "                 46, 119, 141, 242, 10, 72, 239, 114, 33, 141, 141, 48, 102, 237, 184, 99, 228, 153, 110, 109, 233,\n"
                                              "                 120, 148, 3, 172, 162, 252, 158, 119, 193, 239, 2, 35, 47, 4, 190, 87, 6, 63, 111, 180, 238, 43,\n"
                                              "                 50, 14, 97, 180, 2, 169, 20, 192, 221, 177, 242, 195, 125, 147, 79, 22, 141, 35, 63, 18, 56, 86,\n"
                                              "                 121, 2, 243, 16, 50, 141, 1, 208, 138, 159, 186, 24, 180, 171, 100, 153, 233, 99, 38, 184, 251,\n"
                                              "                 156, 83, 241, 26, 13, 192, 188, 187, 202, 23, 28, 163, 18, 89, 84, 90, 123, 11, 30, 12, 52, 205,\n"
                                              "                 253, 240, 185, 243, 155, 148, 128, 12, 213, 138, 139, 28, 181, 99, 29, 194, 132, 254, 143, 62, 29,\n"
                                              "                 232, 116, 237, 253, 100, 81, 118, 252, 203, 56, 91, 91, 52, 184, 172, 46, 14, 19, 36, 127, 55, 99,\n"
                                              "                 175, 77, 17, 162, 193, 204, 152, 14, 19, 125, 175, 51, 249, 196, 13, 223, 83, 51, 218, 100, 188,\n"
                                              "                 38, 5, 203, 104, 18, 72, 151, 95, 101, 15, 135, 87, 37, 244, 186, 195, 237, 24, 154, 32, 182, 104,\n"
                                              "                 205, 247, 81, 3, 19, 249, 111, 168, 6, 171, 232, 43, 177, 120, 172, 175, 155, 245, 16, 214, 202,\n"
                                              "                 108, 32, 108, 254, 196, 54, 237, 200, 79, 164, 118, 217, 103, 90, 17, 240, 181, 221, 11, 157]]\n"
                                              "        }\n"
                                              "    },\n"
                                              "    \"requested_proof\": {\n"
                                              "        \"revealed_attrs\": {\"attr1_referent\": {\"sub_proof_index\": 0, \"raw\": \"Alex\",\n"
                                              "                                              \"encoded\": \"1139481716457488690172217916278103335\"}},\n"
                                              "        \"unrevealed_attrs\": {},\n"
                                              "        \"self_attested_attrs\": {},\n"
                                              "        \"predicates\": {\"predicate1_referent\": {\"sub_proof_index\": 0}}\n"
                                              "    },\n"
                                              "    \"identifiers\": [{\"cred_def_id\": \"%@\", \"schema_id\": \"%@\"}]\n"
                                              "}", [[AnoncredsUtils sharedInstance] getIssuer1GvtCredDefId], [[AnoncredsUtils sharedInstance] getGvtSchemaId]];
}

// MARK: issuer credential


- (NSError *)issuerCreateSchemaWithName:(NSString *)name
                                version:(NSString *)version
                                  attrs:(NSString *)attrs
                              issuerDID:(NSString *)issuerDID
                               schemaId:(NSString **)schemaId
                             schemaJson:(NSString **)schemaJson {
    __block NSError *err = nil;
    __block NSString *outSchemaId = nil;
    __block NSString *outSchemaJson = nil;
    XCTestExpectation *completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];


    [IndyAnoncreds issuerCreateSchemaWithName:name
                                      version:version
                                        attrs:attrs
                                    issuerDID:issuerDID
                                   completion:^(NSError *error, NSString *schemaID, NSString *schemaJSON) {
                                       err = error;
                                       outSchemaId = schemaID;
                                       outSchemaJson = schemaJSON;

                                       [completionExpectation fulfill];
                                   }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils longTimeout]];

    if (schemaId) {*schemaId = outSchemaId;}
    if (schemaJson) {*schemaJson = outSchemaJson;}

    return err;
}

- (NSError *)issuerCreateAndStoreCredentialDefForSchema:(NSString *)schemaJSON
                                              issuerDID:(NSString *)issuerDID
                                                    tag:(NSString *)tag
                                                   type:(NSString *)type
                                             configJSON:(NSString *)configJSON
                                           walletHandle:(IndyHandle)walletHandle
                                              credDefId:(NSString **)credentialDefId
                                            credDefJson:(NSString **)credentialDefJson {
    __block NSError *err = nil;
    __block NSString *outCredentialDefId = nil;
    __block NSString *outCredentialDefJson = nil;
    XCTestExpectation *completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];


    [IndyAnoncreds issuerCreateAndStoreCredentialDefForSchema:schemaJSON
                                                    issuerDID:issuerDID
                                                          tag:tag
                                                         type:type
                                                   configJSON:configJSON
                                                 walletHandle:walletHandle
                                                   completion:^(NSError *error, NSString *credDefID, NSString *credDefJSON) {
                                                       err = error;
                                                       outCredentialDefId = credDefID;
                                                       outCredentialDefJson = credDefJSON;

                                                       [completionExpectation fulfill];
                                                   }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils longTimeout]];

    if (credentialDefId) {*credentialDefId = outCredentialDefId;}
    if (credentialDefJson) {*credentialDefJson = outCredentialDefJson;}

    return err;
}

- (NSError *)issuerCreateAndStoreRevocRegForCredentialDefId:(NSString *)credDefID
                                                  issuerDID:(NSString *)issuerDID
                                                       type:(NSString *)type
                                                        tag:(NSString *)tag
                                                 configJSON:(NSString *)configJSON
                                          tailsWriterHandle:(IndyHandle)tailsWriterHandle
                                               walletHandle:(IndyHandle)walletHandle
                                                 revocRegId:(NSString **)revocRegId
                                            revocRegDefJson:(NSString **)revocRegDefJson
                                          revocRegEntryJson:(NSString **)revocRegEntryJson {
    __block NSError *err = nil;
    __block NSString *outRevRegId = nil;
    __block NSString *outRevocRegDefJson = nil;
    __block NSString *outRevocRegEntryJson = nil;
    XCTestExpectation *completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];


    [IndyAnoncreds issuerCreateAndStoreRevocRegForCredentialDefId:credDefID
                                                        issuerDID:issuerDID
                                                             type:type
                                                              tag:tag
                                                       configJSON:configJSON
                                                tailsWriterHandle:tailsWriterHandle
                                                     walletHandle:walletHandle
                                                       completion:^(NSError *error, NSString *revocRegID, NSString *revocRegDefJSON, NSString *revocRegEntryJSON) {
                                                           err = error;
                                                           outRevRegId = revocRegID;
                                                           outRevocRegDefJson = revocRegDefJSON;
                                                           outRevocRegEntryJson = revocRegEntryJSON;

                                                           [completionExpectation fulfill];
                                                       }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils longTimeout]];

    if (revocRegId) {*revocRegId = outRevRegId;}
    if (revocRegDefJson) {*revocRegDefJson = outRevocRegDefJson;}
    if (revocRegEntryJson) {*revocRegEntryJson = outRevocRegEntryJson;}

    return err;
}

- (NSError *)issuerRevokeCredentialByCredRevocId:(NSString *)credRevocId
                                        revRegId:(NSString *)revRegId
                         blobStorageReaderHandle:(NSNumber *)blobStorageReaderHandle
                                    walletHandle:(IndyHandle)walletHandle
                               revocRegDeltaJson:(NSString **)revocRegDeltaJson {
    __block NSError *err = nil;
    __block NSString *outRevocRegDeltaJson = nil;
    XCTestExpectation *completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds issuerRevokeCredentialByCredRevocId:credRevocId
                                              revRegId:revRegId
                               blobStorageReaderHandle:blobStorageReaderHandle
                                          walletHandle:walletHandle
                                            completion:^(NSError *error, NSString *revocRegDeltaJSON) {
                                                err = error;
                                                outRevocRegDeltaJson = revocRegDeltaJSON;

                                                [completionExpectation fulfill];
                                            }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils longTimeout]];

    if (revocRegDeltaJson) {*revocRegDeltaJson = outRevocRegDeltaJson;}

    return err;
}

/*- (NSError *)issuerRecoverCredentialByCredRevocId:(NSString *)credRevocId
                                         revRegId:(NSString *)revRegId
                          blobStorageReaderHandle:(NSNumber *)blobStorageReaderHandle
                                     walletHandle:(IndyHandle)walletHandle
                                revocRegDeltaJson:(NSString **)revocRegDeltaJson {
    __block NSError *err = nil;
    __block NSString *outRevocRegDeltaJson = nil;
    XCTestExpectation *completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds issuerRecoverCredentialByCredRevocId:credRevocId
                                               revRegId:revRegId
                                blobStorageReaderHandle:blobStorageReaderHandle
                                           walletHandle:walletHandle
                                             completion:^(NSError *error, NSString *revocRegDeltaJSON) {
                                                 err = error;
                                                 outRevocRegDeltaJson = revocRegDeltaJSON;

                                                 [completionExpectation fulfill];
                                             }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils longTimeout]];

    if (revocRegDeltaJson) {*revocRegDeltaJson = outRevocRegDeltaJson;}

    return err;
}*/


- (NSError *)issuerCreateCredentialOfferForCredDefId:(NSString *)credDefID
                                        walletHandle:(IndyHandle)walletHandle
                                       credOfferJson:(NSString **)credOfferJson {
    __block NSError *err = nil;
    __block NSString *outCredentialOfferJson = nil;
    XCTestExpectation *completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];


    [IndyAnoncreds issuerCreateCredentialOfferForCredDefId:credDefID
                                              walletHandle:walletHandle
                                                completion:^(NSError *error, NSString *credentialOfferJSON) {
                                                    err = error;
                                                    outCredentialOfferJson = credentialOfferJSON;

                                                    [completionExpectation fulfill];
                                                }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils longTimeout]];

    if (credOfferJson) {*credOfferJson = outCredentialOfferJson;}

    return err;
}

- (NSError *)issuerCreateCredentialForCredentialRequest:(NSString *)credReqJSON
                                          credOfferJSON:(NSString *)credOfferJSON
                                         credValuesJSON:(NSString *)credValuesJSON
                                               revRegId:(NSString *)revRegId
                                blobStorageReaderHandle:(NSNumber *)blobStorageReaderHandle
                                           walletHandle:(IndyHandle)walletHandle
                                               credJson:(NSString **)credJson
                                            credRevocId:(NSString **)credRevocId
                                      revocRegDeltaJSON:(NSString **)revocRegDeltaJson {
    __block NSError *err = nil;
    __block NSString *outCredentialJson;
    __block NSString *outCredRevocId;
    __block NSString *outRevocRegDeltaJson;
    XCTestExpectation *completionExpectation = nil;

    completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds issuerCreateCredentialForCredentialRequest:credReqJSON
                                                credOfferJSON:credOfferJSON
                                               credValuesJSON:credValuesJSON
                                                     revRegId:revRegId
                                      blobStorageReaderHandle:blobStorageReaderHandle
                                                 walletHandle:walletHandle
                                                   completion:^(NSError *error, NSString *credentialJSON, NSString *credentialRevocID, NSString *revocRegDeltaJSON) {
                                                       err = error;
                                                       outCredentialJson = credentialJSON;
                                                       outCredRevocId = credentialRevocID;
                                                       outRevocRegDeltaJson = revocRegDeltaJSON;
                                                       [completionExpectation fulfill];
                                                   }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils longTimeout]];

    if (credJson) {*credJson = outCredentialJson;}
    if (credRevocId) {*credRevocId = outCredRevocId;}
    if (revocRegDeltaJson) {*revocRegDeltaJson = outRevocRegDeltaJson;}
    return err;
}

- (NSError *)issuerMergerRevocationRegistryDelta:(NSString *)revRegDelta
                                       withDelta:(NSString *)otherRevRegDelta
                               mergedRevRegDelta:(NSString **)mergedRevRegDelta {
    __block NSError *err = nil;
    __block NSString *outMergedRevRegDelta = nil;
    XCTestExpectation *completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds issuerMergerRevocationRegistryDelta:revRegDelta
                                             withDelta:otherRevRegDelta
                                            completion:^(NSError *error, NSString *mergerRevRegDelta) {
                                                err = error;
                                                outMergedRevRegDelta = mergerRevRegDelta;

                                                [completionExpectation fulfill];
                                            }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils longTimeout]];

    if (mergedRevRegDelta) {*mergedRevRegDelta = outMergedRevRegDelta;}

    return err;
}

- (NSError *)proverCreateMasterSecret:(NSString *)masterSecretId
                         walletHandle:(IndyHandle)walletHandle
                    outMasterSecretId:(NSString **)outMasterSecretId {
    __block NSError *err = nil;
    __block NSString *outMasterSecretID = nil;

    XCTestExpectation *completionExpectation = nil;

    completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds proverCreateMasterSecret:masterSecretId
                               walletHandle:walletHandle
                                 completion:^(NSError *error, NSString *outMsId) {
                                     err = error;
                                     outMasterSecretID = outMsId;

                                     [completionExpectation fulfill];
                                 }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils defaultTimeout]];

    if (outMasterSecretId) {*outMasterSecretId = outMasterSecretID;}

    return err;
}

- (NSError *)proverCreateCredentialReqForCredentialOffer:(NSString *)credOfferJSON
                                       credentialDefJSON:(NSString *)credentialDefJSON
                                               proverDID:(NSString *)proverDID
                                          masterSecretID:(NSString *)masterSecretID
                                            walletHandle:(IndyHandle)walletHandle
                                             credReqJson:(NSString **)credReqJson
                                     credReqMetadataJson:(NSString **)credReqMetadataJson {
    __block NSError *err = nil;
    __block NSString *outCredentialReqJSON;
    __block NSString *outCredentialReqMetadataJSON;
    XCTestExpectation *completionExpectation = nil;

    completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds proverCreateCredentialReqForCredentialOffer:credOfferJSON
                                             credentialDefJSON:credentialDefJSON
                                                     proverDID:proverDID
                                                masterSecretID:masterSecretID
                                                  walletHandle:walletHandle
                                                    completion:^(NSError *error, NSString *credentialReqJSON, NSString *credentialReqMetadataJSON) {
                                                        err = error;
                                                        outCredentialReqJSON = credentialReqJSON;
                                                        outCredentialReqMetadataJSON = credentialReqMetadataJSON;
                                                        [completionExpectation fulfill];
                                                    }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils longTimeout]];

    if (credReqJson) {*credReqJson = outCredentialReqJSON;}
    if (credReqMetadataJson) {*credReqMetadataJson = outCredentialReqMetadataJSON;}
    return err;
}


- (NSError *)proverStoreCredential:(NSString *)credJson
                            credID:(NSString *)credID
               credReqMetadataJSON:(NSString *)credReqMetadataJSON
                       credDefJSON:(NSString *)credDefJSON
                     revRegDefJSON:(NSString *)revRegDefJSON
                      walletHandle:(IndyHandle)walletHandle
                         outCredId:(NSString **)outCredId {
    __block NSError *err = nil;
    __block NSString *outCredentialID;
    XCTestExpectation *completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds proverStoreCredential:credJson
                                  credID:credID
                     credReqMetadataJSON:credReqMetadataJSON
                             credDefJSON:credDefJSON
                           revRegDefJSON:revRegDefJSON
                            walletHandle:walletHandle
                              completion:^(NSError *error, NSString *credentialID) {
                                  err = error;
                                  outCredentialID = credentialID;

                                  [completionExpectation fulfill];
                              }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils longTimeout]];

    if (outCredId) {*outCredId = outCredentialID;}
    return err;
}

- (NSError *)proverGetCredentialsForProofReq:(NSString *)proofReqJSON
                                walletHandle:(IndyHandle)walletHandle
                             credentialsJson:(NSString **)outCredentialsJson {
    __block NSError *err = nil;
    __block NSString *outJson;
    XCTestExpectation *completionExpectation = nil;

    completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds proverGetCredentialsForProofReq:proofReqJSON
                                      walletHandle:walletHandle
                                        completion:^(NSError *error, NSString *credentialsJSON) {
                                            err = error;
                                            outJson = credentialsJSON;
                                            [completionExpectation fulfill];
                                        }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils defaultTimeout]];

    if (outCredentialsJson) {*outCredentialsJson = outJson;}

    return err;
}

- (NSError *)proverGetCredentialsForFilter:(NSString *)filterJSON
                              walletHandle:(IndyHandle)walletHandle
                            credentilsJson:(NSString **)credentialsJson {
    __block NSError *err = nil;
    __block NSString *outJson;
    XCTestExpectation *completionExpectation = nil;

    completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds proverGetCredentialsForFilter:filterJSON
                                    walletHandle:walletHandle
                                      completion:^(NSError *error, NSString *credentialsJSON) {
                                          err = error;
                                          outJson = credentialsJSON;
                                          [completionExpectation fulfill];
                                      }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils defaultTimeout]];

    if (credentialsJson) {*credentialsJson = outJson;}

    return err;
}

- (NSError *)proverCreateProofForRequest:(NSString *)proofRequestJSON
                requestedCredentialsJSON:(NSString *)requestedCredentialsJSON
                          masterSecretID:(NSString *)masterSecretID
                             schemasJSON:(NSString *)schemasJSON
                      credentialDefsJSON:(NSString *)credentialDefsJSON
                         revocStatesJSON:(NSString *)revocStatesJSON
                            walletHandle:(IndyHandle)walletHandle
                               proofJson:(NSString **)proofJson {
    __block NSError *err = nil;
    __block NSString *outProofJson;
    XCTestExpectation *completionExpectation = nil;

    completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds proverCreateProofForRequest:proofRequestJSON
                      requestedCredentialsJSON:requestedCredentialsJSON
                                masterSecretID:masterSecretID
                                   schemasJSON:schemasJSON
                            credentialDefsJSON:credentialDefsJSON
                               revocStatesJSON:revocStatesJSON
                                  walletHandle:walletHandle
                                    completion:^(NSError *error, NSString *proofJSON) {
                                        err = error;
                                        outProofJson = proofJSON;

                                        [completionExpectation fulfill];
                                    }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils longTimeout]];

    if (proofJson) {*proofJson = outProofJson;}
    return err;
}

- (NSError *)createRevocationStateForCredRevID:(NSString *)credRevID
                                     timestamp:(NSNumber *)timestamp
                                 revRegDefJSON:(NSString *)revRegDefJSON
                               revRegDeltaJSON:(NSString *)revRegDeltaJSON
                       blobStorageReaderHandle:(NSNumber *)blobStorageReaderHandle
                                  revStateJson:(NSString **)revStateJson {
    __block NSError *err = nil;
    __block NSString *outRevStateJson;
    XCTestExpectation *completionExpectation = nil;

    completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds createRevocationStateForCredRevID:credRevID
                                           timestamp:timestamp
                                       revRegDefJSON:revRegDefJSON
                                     revRegDeltaJSON:revRegDeltaJSON
                             blobStorageReaderHandle:blobStorageReaderHandle
                                          completion:^(NSError *error, NSString *revInfoJSON) {
                                              err = error;
                                              outRevStateJson = revInfoJSON;

                                              [completionExpectation fulfill];
                                          }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils longTimeout]];

    if (revStateJson) {*revStateJson = outRevStateJson;}
    return err;
}

- (NSError *)updateRevocationState:(NSString *)revStateJSON
                         credRevID:(NSString *)credRevID
                         timestamp:(NSNumber *)timestamp
                     revRegDefJSON:(NSString *)revRegDefJSON
                   revRegDeltaJSON:(NSString *)revRegDeltaJSON
           blobStorageReaderHandle:(NSNumber *)blobStorageReaderHandle
               updatedRevStateJson:(NSString **)updatedRevStateJson {
    __block NSError *err = nil;
    __block NSString *outUpdatedRevSateJson;
    XCTestExpectation *completionExpectation = nil;

    completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds updateRevocationState:revStateJSON
                               credRevID:credRevID
                               timestamp:timestamp
                           revRegDefJSON:revRegDefJSON
                         revRegDeltaJSON:revRegDeltaJSON
                 blobStorageReaderHandle:blobStorageReaderHandle
                              completion:^(NSError *error, NSString *updatedRevInfoJSON) {
                                  err = error;
                                  outUpdatedRevSateJson = updatedRevInfoJSON;

                                  [completionExpectation fulfill];
                              }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils longTimeout]];

    if (updatedRevStateJson) {*updatedRevStateJson = outUpdatedRevSateJson;}
    return err;
}

- (NSError *)verifierVerifyProofRequest:(NSString *)proofRequestJson
                              proofJSON:(NSString *)proofJSON
                            schemasJSON:(NSString *)schemasJSON
                     credentialDefsJSON:(NSString *)credentialDefsJSON
                       revocRegDefsJSON:(NSString *)revocRegDefsJSON
                          revocRegsJSON:(NSString *)revocRegsJSON
                                isValid:(BOOL *)isValid {
    __block NSError *err = nil;
    XCTestExpectation *completionExpectation = nil;

    completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds verifierVerifyProofRequest:proofRequestJson
                                    proofJSON:proofJSON
                                  schemasJSON:schemasJSON
                           credentialDefsJSON:credentialDefsJSON
                             revocRegDefsJSON:revocRegDefsJSON
                                revocRegsJSON:revocRegsJSON
                                   completion:^(NSError *error, BOOL valid) {
                                       err = error;
                                       if (isValid) {
                                           *isValid = valid;
                                       }
                                       [completionExpectation fulfill];
                                   }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils longTimeout]];
    return err;

}

- (NSError *)initializeCommonWalletAndReturnHandle:(IndyHandle *)walletHandle
                                 credentialDefJson:(NSString **)credentialDefJson
                               credentialOfferJson:(NSString **)credentialOfferJson
                                 credentialReqJson:(NSString **)credentialReqJson
                                    credentialJson:(NSString **)credentialJson {
    if (self.isCommonWalletCreated) {
        if (walletHandle) {
            *walletHandle = self.walletHandle;
        }
        if (credentialDefJson) {
            *credentialDefJson = _singletoneCredentialdefJson;
        }
        if (credentialOfferJson) {
            *credentialOfferJson = _singletoneCredentialofferJson;
        }
        if (credentialReqJson) {
            *credentialReqJson = _singletoneCredentialreqJson;
        }
        if (credentialJson) {
            *credentialJson = _singletoneCredentialJson;
        }
        return [NSError errorWithDomain:@""
                                   code:Success
                               userInfo:nil];
    }

    [TestUtils cleanupStorage];

    NSError *ret;

    // 1. Create and open wallet
    self.walletHandle = 0;
    IndyHandle tempWalletHandle = 0;
    ret = [[WalletUtils sharedInstance] createAndOpenWalletWithPoolName:@"pool1"
                                                                  xtype:nil
                                                                 handle:&tempWalletHandle];
    XCTAssertEqual(ret.code, Success, @"WalletUtils::createAndOpenWalletWithPoolName failed");
    if (ret.code != Success) {return ret;}

    //2. Create GVT Schema
    NSString *gvtSchemaId;
    NSString *gvtSchemaJson;
    ret = [self issuerCreateSchemaWithName:[TestUtils gvtSchemaName]
                                   version:[TestUtils schemaVersion]
                                     attrs:[TestUtils gvtSchemaAttrs]
                                 issuerDID:[TestUtils issuerDid]
                                  schemaId:&gvtSchemaId
                                schemaJson:&gvtSchemaJson];
    XCTAssertEqual(ret.code, Success, @"issuerCreateSchemaForIssuerDID failed");

    //3. Create XYZ Schema
    NSString *xyzSchemaId;
    NSString *xyzSchemaJson;
    ret = [self issuerCreateSchemaWithName:[TestUtils xyzSchemaName]
                                   version:[TestUtils schemaVersion]
                                     attrs:[TestUtils xyzSchemaAttrs]
                                 issuerDID:[TestUtils issuerDid]
                                  schemaId:&xyzSchemaId
                                schemaJson:&xyzSchemaJson];
    XCTAssertEqual(ret.code, Success, @"issuerCreateSchemaForIssuerDID failed");

    //4. Issuer1 create GVT CredentialDef
    NSString *issuer1GvtCredentialDefId;
    NSString *issuer1GvtCredentialDefJson;
    ret = [self issuerCreateAndStoreCredentialDefForSchema:gvtSchemaJson
                                                 issuerDID:[TestUtils issuerDid]
                                                       tag:[TestUtils tag]
                                                      type:nil
                                                configJSON:[self defaultCredentialDefConfig]
                                              walletHandle:tempWalletHandle
                                                 credDefId:&issuer1GvtCredentialDefId
                                               credDefJson:&issuer1GvtCredentialDefJson];
    XCTAssertEqual(ret.code, Success, @"issuerCreateCredentialDefinifionWithWalletHandle failed");

    //5. Issuer1 create XYZ CredentialDef
    NSString *issuer1XyzCredentialDefId;
    NSString *issuer1XyzCredentialDefJson;
    ret = [self issuerCreateAndStoreCredentialDefForSchema:xyzSchemaJson
                                                 issuerDID:[TestUtils issuerDid]
                                                       tag:[TestUtils tag]
                                                      type:nil
                                                configJSON:[self defaultCredentialDefConfig]
                                              walletHandle:tempWalletHandle
                                                 credDefId:&issuer1XyzCredentialDefId
                                               credDefJson:&issuer1XyzCredentialDefJson];
    XCTAssertEqual(ret.code, Success, @"issuerCreateCredentialDefinifionWithWalletHandle failed");

    //6. Issuer2 create XYZ CredentialDef
    NSString *issuer2GvtCredentialDefId;
    NSString *issuer2GvtCredentialDefJson;
    ret = [self issuerCreateAndStoreCredentialDefForSchema:gvtSchemaJson
                                                 issuerDID:[TestUtils issuer2Did]
                                                       tag:[TestUtils tag]
                                                      type:nil
                                                configJSON:[self defaultCredentialDefConfig]
                                              walletHandle:tempWalletHandle
                                                 credDefId:&issuer2GvtCredentialDefId
                                               credDefJson:&issuer2GvtCredentialDefJson];
    XCTAssertEqual(ret.code, Success, @"issuerCreateCredentialDefinifionWithWalletHandle failed");

    // 7. Issuer1 create GVT Credential Offer
    NSString *issuer1GvtCredentialOfferJSON = nil;
    ret = [[AnoncredsUtils sharedInstance] issuerCreateCredentialOfferForCredDefId:issuer1GvtCredentialDefId
                                                                      walletHandle:tempWalletHandle
                                                                     credOfferJson:&issuer1GvtCredentialOfferJSON];
    XCTAssertEqual(ret.code, Success, @"AnoncredsUtils::issuerCreateAndStoreCredentialDef() failed!");

    //8. Issuer1 create XYZ Credential Offer
    NSString *issuer1XyzCredentialOfferJSON = nil;
    ret = [[AnoncredsUtils sharedInstance] issuerCreateCredentialOfferForCredDefId:issuer1XyzCredentialDefId
                                                                      walletHandle:tempWalletHandle
                                                                     credOfferJson:&issuer1XyzCredentialOfferJSON];
    XCTAssertEqual(ret.code, Success, @"AnoncredsUtils::issuerCreateAndStoreCredentialDef() failed!");

    // 9. Issuer2 create GVT Credential Offer
    NSString *issuer2GvtCredentialOfferJSON = nil;
    ret = [[AnoncredsUtils sharedInstance] issuerCreateCredentialOfferForCredDefId:issuer2GvtCredentialDefId
                                                                      walletHandle:tempWalletHandle
                                                                     credOfferJson:&issuer2GvtCredentialOfferJSON];
    XCTAssertEqual(ret.code, Success, @"AnoncredsUtils::issuerCreateAndStoreCredentialDef() failed!");

    //10. Create MasterSecret
    ret = [self proverCreateMasterSecret:[TestUtils commonMasterSecretName]
                            walletHandle:tempWalletHandle
                       outMasterSecretId:nil];
    XCTAssertEqual(ret.code, Success, @"proverCreateMasterSecret failed");

    //11. Prover create Credential Request for Issuer1 GVT Credential
    NSString *issuer1GvtCredentialRequest;
    NSString *issuer1GvtCredentialRequestMetadata;
    ret = [self proverCreateCredentialReqForCredentialOffer:issuer1GvtCredentialOfferJSON
                                          credentialDefJSON:issuer1GvtCredentialDefJson
                                                  proverDID:[TestUtils proverDid]
                                             masterSecretID:[TestUtils commonMasterSecretName]
                                               walletHandle:tempWalletHandle
                                                credReqJson:&issuer1GvtCredentialRequest
                                        credReqMetadataJson:&issuer1GvtCredentialRequestMetadata];
    XCTAssertEqual(ret.code, Success, @"proverCreateAndStoreCredentialReq failed for issuer1GvtCredentialRequest");

    //12. Issuer1 create  GVT Credential
    NSString *issuer1GvtCredential;
    ret = [self issuerCreateCredentialForCredentialRequest:issuer1GvtCredentialRequest
                                             credOfferJSON:issuer1GvtCredentialOfferJSON
                                            credValuesJSON:[self getGvtCredentialValuesJson]
                                                  revRegId:nil
                                   blobStorageReaderHandle:nil
                                              walletHandle:tempWalletHandle
                                                  credJson:&issuer1GvtCredential
                                               credRevocId:nil
                                         revocRegDeltaJSON:nil];
    XCTAssertEqual(ret.code, Success, @"issuerCreateCredentialWithWalletHandle failed");

    //13. Prover store GVT credential from issuer1
    ret = [self proverStoreCredential:issuer1GvtCredential
                               credID:[self credentialId1]
                  credReqMetadataJSON:issuer1GvtCredentialRequestMetadata
                          credDefJSON:issuer1GvtCredentialDefJson
                        revRegDefJSON:nil
                         walletHandle:tempWalletHandle
                            outCredId:nil];
    XCTAssertEqual(ret.code, Success, @"proverStoreCredentialWithWalletHandle failed");

    //14. Prover create Credential Request for Issuer1 XYZ Credential
    NSString *issuer1XyzCredentialRequest;
    NSString *issuer1XyzCredentialRequestMetadata;
    ret = [self proverCreateCredentialReqForCredentialOffer:issuer1XyzCredentialOfferJSON
                                          credentialDefJSON:issuer1XyzCredentialDefJson
                                                  proverDID:[TestUtils proverDid]
                                             masterSecretID:[TestUtils commonMasterSecretName]
                                               walletHandle:tempWalletHandle
                                                credReqJson:&issuer1XyzCredentialRequest
                                        credReqMetadataJson:&issuer1XyzCredentialRequestMetadata];
    XCTAssertEqual(ret.code, Success, @"proverCreateAndStoreCredentialReq failed for issuer1GvtCredentialRequest");

    //15. Issuer1 create  XYZ Credential
    NSString *issuer1XyzCredential;
    ret = [self issuerCreateCredentialForCredentialRequest:issuer1XyzCredentialRequest
                                             credOfferJSON:issuer1XyzCredentialOfferJSON
                                            credValuesJSON:[self getXyzCredentialValuesJson]
                                                  revRegId:nil
                                   blobStorageReaderHandle:nil
                                              walletHandle:tempWalletHandle
                                                  credJson:&issuer1XyzCredential
                                               credRevocId:nil
                                         revocRegDeltaJSON:nil];
    XCTAssertEqual(ret.code, Success, @"issuerCreateCredentialWithWalletHandle failed");

    //16. Prover store XYZ credential from Issuer1
    ret = [self proverStoreCredential:issuer1XyzCredential
                               credID:[self credentialId2]
                  credReqMetadataJSON:issuer1XyzCredentialRequestMetadata
                          credDefJSON:issuer1XyzCredentialDefJson
                        revRegDefJSON:nil
                         walletHandle:tempWalletHandle
                            outCredId:nil];
    XCTAssertEqual(ret.code, Success, @"proverStoreCredentialWithWalletHandle failed");


    //17. Prover create Credential Request for Issuer2 GVT Credential
    NSString *issuer2GvtCredentialRequest;
    NSString *issuer2GvtCredentialRequestMetadata;
    ret = [self proverCreateCredentialReqForCredentialOffer:issuer2GvtCredentialOfferJSON
                                          credentialDefJSON:issuer2GvtCredentialDefJson
                                                  proverDID:[TestUtils proverDid]
                                             masterSecretID:[TestUtils commonMasterSecretName]
                                               walletHandle:tempWalletHandle
                                                credReqJson:&issuer2GvtCredentialRequest
                                        credReqMetadataJson:&issuer2GvtCredentialRequestMetadata];
    XCTAssertEqual(ret.code, Success, @"proverCreateAndStoreCredentialReq failed for issuer2GvtCredentialRequest");

    //18. Issuer2 create  GVT Credential
    NSString *issuer2GvtCredential;
    ret = [self issuerCreateCredentialForCredentialRequest:issuer2GvtCredentialRequest
                                             credOfferJSON:issuer2GvtCredentialOfferJSON
                                            credValuesJSON:[self getGvt2CredentialValuesJson]
                                                  revRegId:nil
                                   blobStorageReaderHandle:nil
                                              walletHandle:tempWalletHandle
                                                  credJson:&issuer2GvtCredential
                                               credRevocId:nil
                                         revocRegDeltaJSON:nil];
    XCTAssertEqual(ret.code, Success, @"issuerCreateCredentialWithWalletHandle failed");

    //18. Prover store GVT credential from Issuer2
    ret = [self proverStoreCredential:issuer2GvtCredential
                               credID:@"credentialID3"
                  credReqMetadataJSON:issuer2GvtCredentialRequestMetadata
                          credDefJSON:issuer2GvtCredentialDefJson
                        revRegDefJSON:nil
                         walletHandle:tempWalletHandle
                            outCredId:nil];
    XCTAssertEqual(ret.code, Success, @"proverStoreCredentialWithWalletHandle failed");

    if (walletHandle) {*walletHandle = tempWalletHandle;}
    if (credentialDefJson) {*credentialDefJson = issuer1GvtCredentialDefJson;}
    if (credentialOfferJson) {*credentialOfferJson = issuer1GvtCredentialOfferJSON;}
    if (credentialReqJson) {*credentialReqJson = issuer1GvtCredentialRequest;}
    if (credentialJson) {*credentialJson = issuer1GvtCredential;}
    self.walletHandle = tempWalletHandle;
    _singletoneCredentialdefJson = issuer1GvtCredentialDefJson;
    _singletoneCredentialofferJson = issuer1GvtCredentialOfferJSON;
    _singletoneCredentialreqJson = issuer1GvtCredentialRequest;
    _singletoneCredentialJson = issuer1GvtCredential;

    self.isCommonWalletCreated = true;

    return ret;
}

- (NSString *)toJson:(NSDictionary *)dictionary {
    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:dictionary
                                                       options:NSJSONWritingPrettyPrinted
                                                         error:nil];
    return [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
}

@end
