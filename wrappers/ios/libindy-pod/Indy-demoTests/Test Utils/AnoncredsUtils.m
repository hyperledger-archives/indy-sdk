#import "AnoncredsUtils.h"
#import "TestUtils.h"

@interface AnoncredsUtils ()

@property(assign) BOOL isCommonWalletCreated;
@property(assign) IndyHandle walletHandle;
@property(strong) NSString *singletoneCredentialdefJson;
@property(strong) NSString *singletoneCredentialofferJson;
@property(strong) NSString *singletoneCredentialreqJson;
@property(strong) NSString *singletoneCredentialJson;

@end

@implementation AnoncredsUtils


+ (AnoncredsUtils *)sharedInstance {
    static AnoncredsUtils *instance = nil;
    static dispatch_once_t dispatch_once_block;

    dispatch_once(&dispatch_once_block, ^{
        instance = [AnoncredsUtils new];
        instance.isCommonWalletCreated = false;
        instance.walletHandle = 0;
    });

    return instance;
}

// MARK: - Json configurators

- (NSString *)defaultCredentialDefConfig {
    return [self toJson:@{@"support_revocation": @NO}];
}

- (NSString *)getGvtSchemaId {
    return @"NcYxiDXkpYi6ov5FcYDi1e:2:gvt:1.0";
}

- (NSString *)getGvtSchemaJson {
    return [self toJson:@{
            @"id": [self getGvtSchemaId],
            @"ver": @"1.0",
            @"name": [TestUtils gvtSchemaName],
            @"version": [TestUtils schemaVersion],
            @"attrNames": @[@"age", @"sex", @"height", @"name"]
    }];
}

- (NSString *)getIssuer1GvtCredDefId {
    return @"NcYxiDXkpYi6ov5FcYDi1e:3:CL:NcYxiDXkpYi6ov5FcYDi1e:2:gvt:1.0:TAG1";
}

- (NSString *)getGvtCredentialValuesJson {
    return [self toJson:@{
            @"sex": @{
                    @"raw": @"male",
                    @"encoded": @"5944657099558967239210949258394887428692050081607692519917050011144233115103"
            },
            @"name": @{
                    @"raw": @"Alex",
                    @"encoded": @"1139481716457488690172217916278103335"
            },
            @"height": @{
                    @"raw": @"175",
                    @"encoded": @"175"
            },
            @"age": @{
                    @"raw": @"28",
                    @"encoded": @"28"
            }
    }];
}

- (NSString *)getXyzCredentialValuesJson {
    return [self toJson:@{
            @"status": @{
                    @"raw": @"partial",
                    @"encoded": @"123455672645217415414"
            },
            @"period": @{
                    @"raw": @"8",
                    @"encoded": @"8"
            }
    }];
}

- (NSString *)getGvt2CredentialValuesJson {
    return [self toJson:@{
            @"sex": @{
                    @"raw": @"male",
                    @"encoded": @"3423574238417531735213261554781254821457218541265418245812541274517645176"
            },
            @"name": @{
                    @"raw": @"Alexander",
                    @"encoded": @"245372858126541862352154819291254612"
            },
            @"height": @{
                    @"raw": @"170",
                    @"encoded": @"170"
            },
            @"age": @{
                    @"raw": @"28",
                    @"encoded": @"28"
            }
    }];
}

- (NSString *)credentialId1 {
    return @"credentialID1";
}

- (NSString *)credentialId2 {
    return @"credentialID2";
}

// NOTE: for Anoncreds test
- (NSString *)gvtCredDef {
    return [NSString stringWithFormat:@"{"
                                              "\"ver\":\"1.0\","
                                              "\"id\":\"%@\","
                                              "\"schemaId\":\"%@\","
                                              "\"type\":\"CL\","
                                              "\"tag\":\"TAG1\","
                                              "\"value\":{"
                                              "\"primary\":{"
                                              "\"n\":\"101505098586163850993324449441667930327921395318421039245497935140313733819624079703484493858187697282868633026362164354071077790213701717529376548611449528544226115957868032411200258291063861505003732104025783643055181835390313449969330511614049743573269146184931210024361823544349805445368636255603859925856177584996801982108225399301300800445366975208367346706858848631039828679024665759181273154969259446010226865358888259838216390622360784242518342899477747600356088514958124802710175332466482021318995291071535974578473525895016039228167095392689359587491194991420878063419608740495849466790164142583868124242849\","
                                              "\"s\":\"24456694846043681596607498479774465956731895984240818224245999481420201075435230670764857786182387564715122537502304843781208436569336715818716460197070863854526848781836557232235759019233285082592224782011877562465979651315104062912344374484220475222056440287808747760084587176936692565981559033657187914921150062107760536516086220044038869657882267291995687517601891907436240878966492677460082316808136182802536289121242869868957505909187299832968166035097432826117422280051509590274814618343004386717517026555296000192324048075337410530292025502042966648580055421195017884495392597876750171533191484017805561369791\","
                                              "\"r\":{"
                                              "\"name\":\"34661596743353322658247308682028409572748456377707758122055159715914695119122927168108928138726589376976713302686418755981068356159840794058268863886511608849616243474075642626093079583025785603481380824469432674093083091102390500790496774384212838734922835046431075140117658264985129775792046893022920403434099105468051068682525703839343324674820217133448253740000200751760433861351389003646443480943786867966326142803218368110142980888473923610652515799603306712712470336759520959162312834385132762127288264089021118911750591560593392567341477590862186674952894404043137930915799893515001828965383539529890985992556\","
                                              "\"sex\":\"86129591807106709161063626617678416450241111259503298808580645243529041491185072324173697718957902966347545224994202996126726705801032106403063614452751348806689072963029555977285231627097588250279077478004051251192379469057431510605603025200842049373333547552587941435793655798006770530576243250827047250092163583899878628821449694342695930521826151476435867982947223534992167923531149442928675261983991882788595449433639094684590322699230601788861414368886845135796421901977475425681622920952455210195991994884896335362082693189285737019970001339440531620606309239646880528489683945340034890181089998410939514467888\","
                                              "\"master_secret\":\"78196856778932619046128263194671697096739455015090555196200360041063307522485282081884730611800196487131821217299547655360245374627770028239988391654945376239943190614971915740770222969455826231512933503549412195295145481424996128966592416746570926994638166677577661754550451089717260432009047715335118397078724905171352206002600978162479877626910416532330840390737039075459207538364839333518257839350336146353110079551548657193735939173880908797667706414294974604449173074204987757684433063940978988750349540198242380345386776144154348534093386260677818507941373898164091865999394800532171886511166562543351172278652\","
                                              "\"age\":\"14815751829592044724537150516665301327136146254790204757961999818717990862564661210285903490816215264004862305350048170855251691809692540467869290798265025273261113570598133872937148251866943956858339061346497141721541952477711139795617520152783684111772364445119670290680024638013931900345415757656522988760165228991954231619257502828145598506769311300670976223862199896248333141816246220242679019500083319666331425791505181217440383534376457834386456745646447579502308473233675621656109116166421190875049928145236912606421486866574897558904710681241887959311373102425354285671213623412484579348714895857704964375725\","
                                              "\"height\":\"29879178383148988102694898382411555794450608280429028159659233064097787366980651177499417996617417450109622174283829348542839442986526270937597760771662523692295434571111100739936707161270289740711888462023773940072322645085113153763856750777786224426903611378370702149029655342595565813758761899753935089115081264156318863486556948392894114653896775716812983156094919954885974666777104446074375678143724988505365075667663060461787182812327511468291858993885486971793692908561583142333386248335659700542020392264434669589963273745574567427858375435969761713094660512624500080846282514985613485954943654066334591980182\""
                                              "},"
                                              "\"rctxt\":\"76866027549097295652808804538623191228634095628605421382835181160677836930293214698406495753590466917500213171249871628044597173748527442756414364328982443188124514265364775374504300103955392741716182206530810819296722610436284132741498906002890324827330488863672119705875896163116269022079564047128984248873195997458803018640287640889591361977560860990801257547309651123694594519510618296787869618155072200606951596936042983282303210803081574619415566755667003900765396686164456624872981607837018334572360292111733965039085172639434396988076656135176509381540258791975602239482483839319946147463969464974253203578425\","
                                              "\"z\":\"84190570785612048263703901679341822099823907887835078762830395623204257426391982356938427271472880742751594771317135500071920993748495176117324925310794662511959374741669339214805704931785766364788047476990902561106820143952189235810702145824803793588953202676765373149925156179207791281298882160543832527021830730087469954626519320080901632523772434770011512125957857161042257042060894084794043899912243735803396302784132240096252174573833974913415793745562888400636436239535077281906652742511074754009055261511471404737028844140890809701458934630991198376764133049015085915297740349962070858701654060377719054676722\""
                                              "}}}", [[AnoncredsUtils sharedInstance] getIssuer1GvtCredDefId], [[AnoncredsUtils sharedInstance] getGvtSchemaId]];
}

- (NSString *)proofJSON {
    return [NSString stringWithFormat:@"{"
                                              "\"proof\":{"
                                              "\"proofs\":["
                                              "    {"
                                              "        \"primary_proof\":{"
                                              "            \"eq_proof\":{"
                                              "                \"revealed_attrs\":{\"name\":\"1139481716457488690172217916278103335\"},"
                                              "                \"a_prime\":\"2724769918876014407183766465562633496142947801607571719705937265702455621634166215979186984402348795898402616059065506949609151481331859075112547333892082783091119081588329589977883995332649266027057675541901183104241770111731308799606196995953732103681621366666840260152783680996973389602045184047782887014652410952353528849226536069691161476263119486980697253524429046710186493762558203060140123953984952804359021379520685431573037022687587923755662524939141447267651866021093769611573783971367698471473265841567841219432360264029381715627315167522372044899845011126796711805696079486531085867343144567386835742333\","
                                              "                \"e\":\"180071838747543319173520833653974116346028477865643062926771665124512203352345607491663386569221096814834608491955686974909386954900538739\","
                                              "                \"v\":\"909776162184102586454217452824373187770139045929594982732995084031069976266283932497836970653565747535890892989848858962763819944895606822847709763892485438620341921509481371384598911009789783567980785680065143354226276280716503339644563534264440250116228780187662479456202763882337192574629822053207742508791336042956885841644902318249093211707764149103361208653820384372718102327204702601366984950316397210164365462471777757574590315993555084484459181896759603084129304373876016012053707461444229571508653046991674840541191834566217646657955375838720810569766317719613205622893368584197043837092816682101999880537347918267986340347983872649637997491754016710036725414988520536338888085385305571100024437380914500929435989980038224524514625669478874410892174819166958654012891437102892175894858610383352987182020837213614897910642618218503318550672156910351120009891683060286544458063687335379507111293172909257260888635\","
                                              "                \"m\":{\"master_secret\":\"13477177176556391946949746639751268002035193414656337130308669923985206425180013068035283895390740218068233001275338667567053365421179543684364172039898383616267872023142679334323\",\"sex\":\"4499535355898065906464725920161468368087005303106975343137110151642896440775701232302042820042643856959740703196236336722447418782677508954472542747892262545109084166790915240873\",\"age\":\"3567410906092714297553331691124459470499672905293126340614137464150521883608178405351546886709614049569936363648236440524902133336872965381466834345672417591249625618271903849075\",\"height\":\"13265405775585075393719619522304756759821932499937971856760365977112799413478741830585093020512324819644998004526487283958749102907828078631306706866983687191903040137972955015839\"},"
                                              "                \"m2\":\"12821270502310831238129638902425702320200815186847027550220668437477152140844559551697169893504948836629019499688553500921603910837089469842544327704559281989989446583111700952252\""
                                              "            }, "
                                              "            \"ge_proofs\":["
                                              "                {\"u\":{\"0\":\"10134609138947284520053554100373639286897238319717227293700828298882120128781167366051243640789121281767930895549184691430838804244062234797275928604202606655336711660786877869870\",\"1\":\"12516310665813502478810916487802974582871990250102187676971814103180157232675494077232866467157933229594583830694416869877788358662690786418156696541634532513510202072376548751694\",\"2\":\"2948172052207770847710666114229530143447064890953815713239487674016210548123221557890483683323586381195182254225890813906892648571621936393244567181406828406522683699959964653738\",\"3\":\"11937997273464713690700406694508625390549638921643190468421024118063209334826504485162631769098691433388927869378329619687088521158804259151824394627941800958505466800318703411963\"},"
                                              "                 \"r\":{\"DELTA\":\"1208104786708024759705746109883852538833274202254018154022444008636685414153868121078849368262923100021777742409842600046650081988291941196215880699437834258437270551421871768516971439505877556608741534878089922425484722418930667783949629977280596692245699796843427024517766151888618635190928256751272932332634517349824201327835610821449306560497074792767665495892954328218684485345043899078211349286866957922838264927053539782530666957427331204677507953219771246742107935205148652777535170441880009476095804266259904124204684265615043669384538896500094172259039084708345315265363913549151464261367041528041369275533707612059728889937073546083877649038998378750898867641111967108845174393504220203288016277935081701334\",\"1\":\"1088030387037036033801830216825634470104510501667378945219377925618665659057919091360707704602075672916301918537039836225204472429424958018018494159127773256985045439155005692928779344644804827353266049587349596134842837233846563747030320590482296652163321711513099944671283547779692094467702414741178399787442000821888243742383339673862194986302943993182521995565952184603546016482064713526956310227100080737583859761398725242562822282936776288838777819459806459153865823632599928101866609418270960077201203735929716043409457806660161797506548984899387869693758465469722715919200014386565851789471726808229014585556491993812664826474659810996994176659799504860462735117680304450100100278594232495644613439399092816827\",\"2\":\"3630079425128296305827829210088385725597996969751664953316141387713143301276516612238214069931052587309983352357406489186931065455084860671544503313858884385721772403771698634468625642302394473039301268110148508938232687674028490131353293157834083105009481322642301908205897511413438916341353091840746998900290364153853265815150170493481914338624787763899763550136967928794709024364664457635966139781572025428050130448126266301192797629134134402571963693836592461450656292207393231849663055222810149320061533033401792562467805468664666844858575040065987274669631066245935402869767855556267587308061067048113680006371625588153358685220635503767754572584897881503164383350733685043925696138480616556294913753937541544156\",\"3\":\"3544976055121437201798442858653527017227042460197450263877679724987644499626333470713542475124563267351159578279844270898677237190889867167252103549462469815118037545650653102515991455364073468552154167866774154532423178129379259958390435460732312955307424297694776264887000966673616632904159452546890288452165689792782412477088389333146307152199940970884919999285305946383443382602830840143506262477850638813727702483488107683188245476519052781360276787384923471323441120986389802743232408050281568603421466579221546237889134652605337328196367627008775272847644071477106511209524647770122564856169082828243404345344415516573208026069922899225445748489631925311000862180161230754004377312536052591738609759897926606340\",\"0\":\"1247002817250256786539886396940465588551875109429417656564879437097319767467685233250248459947179734050551923370533983916691483326736979138495407921776673673302008202001219205160967348116540656351410782179415090769712364741793671364210686987552282323512872976478865380212413682833446984448653580735343013026397204162035505612582096200711078950245796508250178313471690528991234354535484158993147420830885755690412283747033309748458263922132751236099886596807900398631041586156933110987086242482115675847976049080010153810873812210557306188741056293783682718047448759811473155292993581527681605074493798051459735032559267831813020732128090831973052829920696913432962703065230427987838842322912675028721453907851719561166\"},"
                                              "                 \"mj\":\"3567410906092714297553331691124459470499672905293126340614137464150521883608178405351546886709614049569936363648236440524902133336872965381466834345672417591249625618271903849075\","
                                              "                 \"alpha\":\"44836934550611157245954170517792314320057941732013740865040489912023418676597914736815484854223639745875193293414937090111251876245320540652998376143382445697723922302791437364133040892618650831049486465559493964113493738790845720867127485782350873187229229891065238420850971005800960041107836018952251371952416438170264401032309938526863538877340979843136616372099210717328040294142848331361571517199218402421734501119690071271180997742176767009966600759725660526489291597539574003634636120878081638394131158248961606330968365225282913440120030857225007269989677136651210111683772417357336718952074831117635625314999220567774808002752557806028780445255782290044631778624957016422407209424485216704110086783833716871132536339590710253289270690421303376339158685830544131718254753011357838704116823744403097241965920875175845971049739720778\","
                                              "                 \"t\":{\"1\":\"98092120193908017232802357868289327468949746633355050783669927601400846295740938032066101046051391047805275201864785344843997381365621991130398118922218803827704297250451943487549985583971033629380961464120442265090731877108199410666999805064605375367858970637800101391702399353782556253362586546895104678064539362990659860982253525677733732745168247581713652022313917288887329168839999613999738143971597965647814539920417948954768679394698306189847125455945524609737480113849501268550994567247937114563188101701629412123063515507086584629050151424919081055856996778499016712646036711429387995276581044459987398943830\",\"2\":\"60576387882734216605882634205633828247170120538489346155316519255919394575728596045669703557223603836186647681196523585205886154060424297168301785024937315757774264836766150961011909986203501247243885534387217326704020479562480683690118779574073654080136133603944616270536682513546027664799636457643517562170956287555013091546959670240497439883785399861080974010065715907761249826140829385449361518411075517865199662520047547404990442969017980321611273719203399097395519175489311664923140381837702902287462982493655949782672786592139329840962497437611984471979266945832785452078594459998842173439844696550704948240767\",\"DELTA\":\"23824964108180788682820018727002385983632082085297744388792592697775805624927823322210514919342890421746690214648167954203477378009964463165145925724757093331672288052390874940508125369222316607118698721051300534839067715646211093733470573044777406594408918009090728975515742908684282241129645782200707113909722888107354841330355049854484687295696112954360571406522686011766586758660643864306305683888169199010386242974755269747809179581622345376228710706156154024825212217287760956581917227491421657266910050282569389728081317453664961758800361325594053721706806836600812121072037024513354288228753541567731847794197\",\"0\":\"83368464164779769172951058622361322394092048966132178190498617954044274629935767621467581219581750547624555727787059469845027305209467323183187901736420426077610078166259637771708703707794392221451967629998090999529638521925801198380919521535948182636790867696195737670111017412605268965255260377135563009440483297933956940706501939932586948832456357766202907560523394501187896516928615142640347528312543376720599151209391633282355909931741843987943509717148326478193946733841581602456105771000159050367586764804885589800897911635945503699118869320215727778107567996705024485455814279176888468292232657314575676588235\",\"3\":\"79898433567051924717736081063645768783653636709461654224254744768719666642001433815351490874872306144916119959034559772613086659633531026250548126716101891993874762358215098964625751266665007363891435777938064899424622264286720783605704926490403541460411124286398326600799276725528736217305180436682389799998262832624707460511188146867983188139240162586289891498916413186988246345450243950281131485594960993484379911478661208170680946704879821810276966816106677736098345138635930352012294975830429390634473170617754727451592200376631685536654745930204697383693107328742505751047836401452276820992543448004025727984853\"},"
                                              "                 \"predicate\":{\"attr_name\":\"age\",\"p_type\":\"GE\",\"value\":18}}]},\"non_revoc_proof\":null}"
                                              "           ],"
                                              "         \"aggregated_proof\":{"
                                              "             \"c_hash\":\"93090583867701382570675558776042207709665461157197083712588362833517810932948\","
                                              "             \"c_list\":[[21,149,151,1,198,119,179,14,29,142,235,157,146,233,132,183,251,116,85,80,66,210,132,137,50,166,22,224,232,198,1,34,127,10,48,99,168,74,177,108,7,136,173,49,208,238,84,155,179,11,1,238,247,172,213,38,165,249,190,71,222,205,95,16,180,205,59,110,193,219,24,151,204,13,89,168,206,162,91,186,140,151,107,50,38,249,97,51,45,102,56,26,233,120,38,94,159,156,180,225,169,167,55,207,86,222,29,221,29,31,58,177,95,132,237,175,6,28,219,3,238,113,38,48,172,137,139,195,109,101,45,166,255,122,218,211,29,41,193,149,69,184,43,248,167,153,92,24,65,178,72,121,22,89,35,77,34,71,178,230,12,192,163,179,34,160,177,129,172,33,49,69,117,103,38,47,134,33,127,121,193,206,107,36,233,156,13,235,197,169,236,22,245,199,46,200,49,47,31,21,211,222,140,16,42,199,21,1,121,250,246,245,113,163,247,167,19,48,197,13,85,123,170,0,52,176,144,203,63,68,176,20,182,195,102,87,67,207,199,1,28,174,105,11,167,60,216,164,210,49,231,35,38,79,110,125],[2,148,103,203,88,155,8,24,124,209,11,223,180,6,53,211,100,77,230,41,221,2,80,221,228,209,144,144,43,37,152,174,201,18,113,231,103,116,165,202,42,62,22,28,143,173,31,194,46,164,136,205,145,49,208,142,25,253,10,3,246,138,183,188,90,5,169,247,51,194,249,17,84,240,33,1,56,85,132,3,250,254,89,233,167,7,246,4,77,34,24,125,219,49,36,44,38,29,137,113,191,153,198,233,16,198,113,192,86,209,51,218,236,65,189,167,195,21,80,70,86,180,33,58,199,62,28,186,127,81,70,58,135,23,164,202,117,194,220,194,79,209,139,164,208,17,242,28,84,57,80,77,244,117,122,30,169,253,127,225,220,131,47,54,114,96,221,142,17,47,141,73,125,9,14,98,133,180,36,159,15,7,172,175,142,153,224,41,153,40,252,13,168,3,129,221,131,221,123,57,56,132,107,136,204,226,17,24,136,134,94,144,64,165,235,180,39,44,142,159,245,209,163,97,79,33,123,50,11,177,70,198,201,169,81,208,218,213,34,86,85,136,238,53,221,102,9,239,169,56,53,189,162,114,3,192,203],[3,9,10,13,134,69,251,29,187,158,168,244,59,64,177,33,215,114,135,188,22,109,163,91,248,186,253,3,143,40,87,248,45,230,192,52,2,83,76,214,41,28,56,14,239,94,118,180,115,71,136,209,13,32,91,204,233,96,182,110,217,139,201,74,74,23,25,215,210,223,158,98,139,167,215,244,243,127,183,62,127,213,194,209,174,251,129,241,77,0,7,42,63,201,233,82,116,29,132,89,221,16,26,152,89,203,86,57,30,25,230,55,7,14,44,119,77,50,169,18,127,52,150,104,4,209,85,84,7,196,24,117,69,178,15,52,243,201,45,177,228,194,109,100,218,200,184,132,104,181,159,116,69,1,76,236,86,101,4,87,185,32,18,244,107,182,97,196,87,28,252,130,156,64,79,248,161,200,153,78,244,115,139,1,235,148,150,96,101,35,153,180,241,63,208,172,100,86,62,101,194,52,237,96,194,118,165,47,25,208,149,173,103,132,91,192,202,126,108,15,192,55,0,177,230,210,58,90,151,220,150,172,147,151,86,15,60,75,14,30,189,71,6,253,12,142,67,153,207,53,68,158,109,33,21,228,86],[1,223,219,128,42,130,52,35,104,27,64,153,212,2,250,205,140,81,152,82,52,89,185,30,239,198,93,127,177,56,181,220,184,172,167,142,239,78,75,129,184,58,108,35,115,65,53,177,63,68,68,68,164,209,106,55,242,50,77,39,191,51,8,14,250,101,219,143,88,14,164,149,82,29,162,241,88,109,166,24,252,231,145,215,81,35,226,17,107,239,142,36,218,109,102,223,60,110,247,62,15,103,162,224,197,60,99,65,117,31,63,164,36,0,38,16,31,9,3,49,198,9,230,213,247,111,9,159,138,31,41,58,239,42,20,158,197,15,22,184,102,103,20,125,241,27,66,225,103,233,96,51,125,33,241,173,21,117,38,18,29,83,80,12,245,174,161,84,220,119,213,30,53,119,221,183,18,105,195,138,67,44,41,82,17,72,83,173,207,107,226,187,140,33,75,3,219,38,16,207,5,195,175,32,185,216,244,178,41,92,185,65,131,24,107,157,6,252,202,36,136,100,241,188,146,0,194,201,73,189,216,1,36,185,123,48,9,37,3,162,229,13,37,229,17,121,59,218,124,65,204,152,245,247,140,225,127],[2,120,234,225,228,254,160,5,44,147,54,109,203,245,217,12,1,49,5,104,230,185,107,6,175,192,108,42,94,120,120,90,123,49,172,141,84,55,140,8,189,227,12,191,248,47,215,179,74,235,107,129,107,250,92,235,246,152,125,116,247,192,156,145,254,130,95,172,12,87,174,100,161,193,224,194,236,68,115,254,225,224,221,216,242,107,213,46,231,145,98,239,192,88,149,189,18,17,214,160,2,12,126,144,225,193,179,175,14,149,211,233,80,128,52,175,40,251,18,39,92,131,222,46,140,222,161,178,58,84,88,252,213,175,136,144,202,175,252,42,146,169,188,13,80,170,223,29,34,37,74,28,178,164,167,153,174,81,217,99,49,114,201,56,190,31,221,162,18,129,72,6,240,249,8,97,14,95,160,110,230,209,14,183,174,52,75,141,51,125,61,15,228,158,187,116,77,157,158,248,5,46,30,73,255,199,131,21,41,30,123,228,199,159,39,25,29,86,143,250,112,207,196,85,21,242,202,165,4,19,183,30,71,155,175,186,110,69,231,167,179,136,46,9,130,50,195,240,173,4,88,171,237,56,146,36,213],[188,186,229,218,203,231,230,15,86,175,150,195,65,29,97,212,37,198,12,232,119,207,177,213,25,46,60,129,244,91,119,246,197,109,120,187,34,152,240,106,209,157,220,22,101,33,151,26,237,27,137,139,223,112,89,124,18,85,162,207,14,5,226,23,107,169,111,116,141,67,105,95,81,237,64,195,48,152,49,228,101,171,93,46,63,125,74,192,234,158,212,164,11,24,138,253,149,124,142,25,13,61,174,222,104,251,178,123,99,53,103,96,222,118,138,132,102,150,72,12,29,101,110,21,175,114,69,238,193,61,96,177,69,72,179,245,17,7,219,8,99,44,251,142,14,12,81,161,208,178,183,125,242,57,146,134,22,23,185,80,108,76,109,25,245,221,195,41,196,190,135,81,61,79,28,10,193,43,232,52,232,237,47,194,61,138,112,145,175,57,31,51,89,126,162,168,130,43,58,36,174,130,90,67,147,239,80,59,243,16,246,67,146,204,0,55,94,158,138,249,132,41,14,164,194,63,38,241,42,2,16,162,175,220,23,7,124,224,150,8,170,122,108,156,219,215,160,82,240,59,243,221,106,62,14,21]]"
                                              "     }"
                                              "},\"requested_proof\":{\"revealed_attrs\":{\"attr1_referent\":{\"sub_proof_index\":0,\"raw\":\"Alex\",\"encoded\":\"1139481716457488690172217916278103335\"}},\"self_attested_attrs\":{},\"unrevealed_attrs\":{},\"predicates\":{\"predicate1_referent\":{\"sub_proof_index\":0}}},"
                                              "\"identifiers\":[{\"cred_def_id\":\"%@\",\"schema_id\":\"%@\",\"rev_reg_id\":null,\"timestamp\":null}]}",
                                      [[AnoncredsUtils sharedInstance] getIssuer1GvtCredDefId], [[AnoncredsUtils sharedInstance] getGvtSchemaId]];
}

// MARK: issuer credential


- (NSError *)issuerCreateSchemaWithName:(NSString *)name
                                version:(NSString *)version
                                  attrs:(NSString *)attrs
                              issuerDID:(NSString *)issuerDID
                               schemaId:(NSString **)schemaId
                             schemaJson:(NSString **)schemaJson {
    __block NSError *err = nil;
    __block NSString *outSchemaId = nil;
    __block NSString *outSchemaJson = nil;
    XCTestExpectation *completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];


    [IndyAnoncreds issuerCreateSchemaWithName:name
                                      version:version
                                        attrs:attrs
                                    issuerDID:issuerDID
                                   completion:^(NSError *error, NSString *schemaID, NSString *schemaJSON) {
                                       err = error;
                                       outSchemaId = schemaID;
                                       outSchemaJson = schemaJSON;

                                       [completionExpectation fulfill];
                                   }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils longTimeout]];

    if (schemaId) {*schemaId = outSchemaId;}
    if (schemaJson) {*schemaJson = outSchemaJson;}

    return err;
}

- (NSError *)issuerCreateAndStoreCredentialDefForSchema:(NSString *)schemaJSON
                                              issuerDID:(NSString *)issuerDID
                                                    tag:(NSString *)tag
                                                   type:(NSString *)type
                                             configJSON:(NSString *)configJSON
                                           walletHandle:(IndyHandle)walletHandle
                                              credDefId:(NSString **)credentialDefId
                                            credDefJson:(NSString **)credentialDefJson {
    __block NSError *err = nil;
    __block NSString *outCredentialDefId = nil;
    __block NSString *outCredentialDefJson = nil;
    XCTestExpectation *completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];


    [IndyAnoncreds issuerCreateAndStoreCredentialDefForSchema:schemaJSON
                                                    issuerDID:issuerDID
                                                          tag:tag
                                                         type:type
                                                   configJSON:configJSON
                                                 walletHandle:walletHandle
                                                   completion:^(NSError *error, NSString *credDefID, NSString *credDefJSON) {
                                                       err = error;
                                                       outCredentialDefId = credDefID;
                                                       outCredentialDefJson = credDefJSON;

                                                       [completionExpectation fulfill];
                                                   }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils longTimeout]];

    if (credentialDefId) {*credentialDefId = outCredentialDefId;}
    if (credentialDefJson) {*credentialDefJson = outCredentialDefJson;}

    return err;
}

- (NSError *)issuerCreateAndStoreRevocRegForCredentialDefId:(NSString *)credDefID
                                                  issuerDID:(NSString *)issuerDID
                                                       type:(NSString *)type
                                                        tag:(NSString *)tag
                                                 configJSON:(NSString *)configJSON
                                          tailsWriterHandle:(IndyHandle)tailsWriterHandle
                                               walletHandle:(IndyHandle)walletHandle
                                                 revocRegId:(NSString **)revocRegId
                                            revocRegDefJson:(NSString **)revocRegDefJson
                                          revocRegEntryJson:(NSString **)revocRegEntryJson {
    __block NSError *err = nil;
    __block NSString *outRevRegId = nil;
    __block NSString *outRevocRegDefJson = nil;
    __block NSString *outRevocRegEntryJson = nil;
    XCTestExpectation *completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];


    [IndyAnoncreds issuerCreateAndStoreRevocRegForCredentialDefId:credDefID
                                                        issuerDID:issuerDID
                                                             type:type
                                                              tag:tag
                                                       configJSON:configJSON
                                                tailsWriterHandle:tailsWriterHandle
                                                     walletHandle:walletHandle
                                                       completion:^(NSError *error, NSString *revocRegID, NSString *revocRegDefJSON, NSString *revocRegEntryJSON) {
                                                           err = error;
                                                           outRevRegId = revocRegID;
                                                           outRevocRegDefJson = revocRegDefJSON;
                                                           outRevocRegEntryJson = revocRegEntryJSON;

                                                           [completionExpectation fulfill];
                                                       }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils longTimeout]];

    if (revocRegId) {*revocRegId = outRevRegId;}
    if (revocRegDefJson) {*revocRegDefJson = outRevocRegDefJson;}
    if (revocRegEntryJson) {*revocRegEntryJson = outRevocRegEntryJson;}

    return err;
}

- (NSError *)issuerRevokeCredentialByCredRevocId:(NSString *)credRevocId
                                        revRegId:(NSString *)revRegId
                         blobStorageReaderHandle:(NSNumber *)blobStorageReaderHandle
                                    walletHandle:(IndyHandle)walletHandle
                               revocRegDeltaJson:(NSString **)revocRegDeltaJson {
    __block NSError *err = nil;
    __block NSString *outRevocRegDeltaJson = nil;
    XCTestExpectation *completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds issuerRevokeCredentialByCredRevocId:credRevocId
                                              revRegId:revRegId
                               blobStorageReaderHandle:blobStorageReaderHandle
                                          walletHandle:walletHandle
                                            completion:^(NSError *error, NSString *revocRegDeltaJSON) {
                                                err = error;
                                                outRevocRegDeltaJson = revocRegDeltaJSON;

                                                [completionExpectation fulfill];
                                            }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils longTimeout]];

    if (revocRegDeltaJson) {*revocRegDeltaJson = outRevocRegDeltaJson;}

    return err;
}

/*- (NSError *)issuerRecoverCredentialByCredRevocId:(NSString *)credRevocId
                                         revRegId:(NSString *)revRegId
                          blobStorageReaderHandle:(NSNumber *)blobStorageReaderHandle
                                     walletHandle:(IndyHandle)walletHandle
                                revocRegDeltaJson:(NSString **)revocRegDeltaJson {
    __block NSError *err = nil;
    __block NSString *outRevocRegDeltaJson = nil;
    XCTestExpectation *completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds issuerRecoverCredentialByCredRevocId:credRevocId
                                               revRegId:revRegId
                                blobStorageReaderHandle:blobStorageReaderHandle
                                           walletHandle:walletHandle
                                             completion:^(NSError *error, NSString *revocRegDeltaJSON) {
                                                 err = error;
                                                 outRevocRegDeltaJson = revocRegDeltaJSON;

                                                 [completionExpectation fulfill];
                                             }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils longTimeout]];

    if (revocRegDeltaJson) {*revocRegDeltaJson = outRevocRegDeltaJson;}

    return err;
}*/


- (NSError *)issuerCreateCredentialOfferForCredDefId:(NSString *)credDefID
                                        walletHandle:(IndyHandle)walletHandle
                                       credOfferJson:(NSString **)credOfferJson {
    __block NSError *err = nil;
    __block NSString *outCredentialOfferJson = nil;
    XCTestExpectation *completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];


    [IndyAnoncreds issuerCreateCredentialOfferForCredDefId:credDefID
                                              walletHandle:walletHandle
                                                completion:^(NSError *error, NSString *credentialOfferJSON) {
                                                    err = error;
                                                    outCredentialOfferJson = credentialOfferJSON;

                                                    [completionExpectation fulfill];
                                                }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils longTimeout]];

    if (credOfferJson) {*credOfferJson = outCredentialOfferJson;}

    return err;
}

- (NSError *)issuerCreateCredentialForCredentialRequest:(NSString *)credReqJSON
                                          credOfferJSON:(NSString *)credOfferJSON
                                         credValuesJSON:(NSString *)credValuesJSON
                                               revRegId:(NSString *)revRegId
                                blobStorageReaderHandle:(NSNumber *)blobStorageReaderHandle
                                           walletHandle:(IndyHandle)walletHandle
                                               credJson:(NSString **)credJson
                                            credRevocId:(NSString **)credRevocId
                                      revocRegDeltaJSON:(NSString **)revocRegDeltaJson {
    __block NSError *err = nil;
    __block NSString *outCredentialJson;
    __block NSString *outCredRevocId;
    __block NSString *outRevocRegDeltaJson;
    XCTestExpectation *completionExpectation = nil;

    completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds issuerCreateCredentialForCredentialRequest:credReqJSON
                                                credOfferJSON:credOfferJSON
                                               credValuesJSON:credValuesJSON
                                                     revRegId:revRegId
                                      blobStorageReaderHandle:blobStorageReaderHandle
                                                 walletHandle:walletHandle
                                                   completion:^(NSError *error, NSString *credentialJSON, NSString *credentialRevocID, NSString *revocRegDeltaJSON) {
                                                       err = error;
                                                       outCredentialJson = credentialJSON;
                                                       outCredRevocId = credentialRevocID;
                                                       outRevocRegDeltaJson = revocRegDeltaJSON;
                                                       [completionExpectation fulfill];
                                                   }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils longTimeout]];

    if (credJson) {*credJson = outCredentialJson;}
    if (credRevocId) {*credRevocId = outCredRevocId;}
    if (revocRegDeltaJson) {*revocRegDeltaJson = outRevocRegDeltaJson;}
    return err;
}

- (NSError *)issuerMergerRevocationRegistryDelta:(NSString *)revRegDelta
                                       withDelta:(NSString *)otherRevRegDelta
                               mergedRevRegDelta:(NSString **)mergedRevRegDelta {
    __block NSError *err = nil;
    __block NSString *outMergedRevRegDelta = nil;
    XCTestExpectation *completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds issuerMergerRevocationRegistryDelta:revRegDelta
                                             withDelta:otherRevRegDelta
                                            completion:^(NSError *error, NSString *mergerRevRegDelta) {
                                                err = error;
                                                outMergedRevRegDelta = mergerRevRegDelta;

                                                [completionExpectation fulfill];
                                            }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils longTimeout]];

    if (mergedRevRegDelta) {*mergedRevRegDelta = outMergedRevRegDelta;}

    return err;
}

- (NSError *)proverCreateMasterSecret:(NSString *)masterSecretId
                         walletHandle:(IndyHandle)walletHandle
                    outMasterSecretId:(NSString **)outMasterSecretId {
    __block NSError *err = nil;
    __block NSString *outMasterSecretID = nil;

    XCTestExpectation *completionExpectation = nil;

    completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds proverCreateMasterSecret:masterSecretId
                               walletHandle:walletHandle
                                 completion:^(NSError *error, NSString *outMsId) {
                                     err = error;
                                     outMasterSecretID = outMsId;

                                     [completionExpectation fulfill];
                                 }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils defaultTimeout]];

    if (outMasterSecretId) {*outMasterSecretId = outMasterSecretID;}

    return err;
}

- (NSError *)proverCreateCredentialReqForCredentialOffer:(NSString *)credOfferJSON
                                       credentialDefJSON:(NSString *)credentialDefJSON
                                               proverDID:(NSString *)proverDID
                                          masterSecretID:(NSString *)masterSecretID
                                            walletHandle:(IndyHandle)walletHandle
                                             credReqJson:(NSString **)credReqJson
                                     credReqMetadataJson:(NSString **)credReqMetadataJson {
    __block NSError *err = nil;
    __block NSString *outCredentialReqJSON;
    __block NSString *outCredentialReqMetadataJSON;
    XCTestExpectation *completionExpectation = nil;

    completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds proverCreateCredentialReqForCredentialOffer:credOfferJSON
                                             credentialDefJSON:credentialDefJSON
                                                     proverDID:proverDID
                                                masterSecretID:masterSecretID
                                                  walletHandle:walletHandle
                                                    completion:^(NSError *error, NSString *credentialReqJSON, NSString *credentialReqMetadataJSON) {
                                                        err = error;
                                                        outCredentialReqJSON = credentialReqJSON;
                                                        outCredentialReqMetadataJSON = credentialReqMetadataJSON;
                                                        [completionExpectation fulfill];
                                                    }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils longTimeout]];

    if (credReqJson) {*credReqJson = outCredentialReqJSON;}
    if (credReqMetadataJson) {*credReqMetadataJson = outCredentialReqMetadataJSON;}
    return err;
}


- (NSError *)proverStoreCredential:(NSString *)credJson
                            credID:(NSString *)credID
               credReqMetadataJSON:(NSString *)credReqMetadataJSON
                       credDefJSON:(NSString *)credDefJSON
                     revRegDefJSON:(NSString *)revRegDefJSON
                      walletHandle:(IndyHandle)walletHandle
                         outCredId:(NSString **)outCredId {
    __block NSError *err = nil;
    __block NSString *outCredentialID;
    XCTestExpectation *completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds proverStoreCredential:credJson
                                  credID:credID
                     credReqMetadataJSON:credReqMetadataJSON
                             credDefJSON:credDefJSON
                           revRegDefJSON:revRegDefJSON
                            walletHandle:walletHandle
                              completion:^(NSError *error, NSString *credentialID) {
                                  err = error;
                                  outCredentialID = credentialID;

                                  [completionExpectation fulfill];
                              }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils longTimeout]];

    if (outCredId) {*outCredId = outCredentialID;}
    return err;
}

- (NSError *)proverGetCredentialsForProofReq:(NSString *)proofReqJSON
                                walletHandle:(IndyHandle)walletHandle
                             credentialsJson:(NSString **)outCredentialsJson {
    __block NSError *err = nil;
    __block NSString *outJson;
    XCTestExpectation *completionExpectation = nil;

    completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds proverGetCredentialsForProofReq:proofReqJSON
                                      walletHandle:walletHandle
                                        completion:^(NSError *error, NSString *credentialsJSON) {
                                            err = error;
                                            outJson = credentialsJSON;
                                            [completionExpectation fulfill];
                                        }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils defaultTimeout]];

    if (outCredentialsJson) {*outCredentialsJson = outJson;}

    return err;
}

- (NSError *)proverGetCredentialWithId:(NSString *)credId
                          walletHandle:(IndyHandle)walletHandle
                        credentialJson:(NSString **)outCredentialJson {
    __block NSError *err = nil;
    __block NSString *outJson;
    XCTestExpectation *completionExpectation = nil;

    completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds proverGetCredentialWithId:credId
                                walletHandle:walletHandle
                                  completion:^(NSError *error, NSString *credentialsJSON) {
                                      err = error;
                                      outJson = credentialsJSON;
                                      [completionExpectation fulfill];
                                  }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils defaultTimeout]];

    if (outCredentialJson) {*outCredentialJson = outJson;}

    return err;
}

- (NSError *)proverGetCredentialsForFilter:(NSString *)filterJSON
                              walletHandle:(IndyHandle)walletHandle
                            credentilsJson:(NSString **)credentialsJson {
    __block NSError *err = nil;
    __block NSString *outJson;
    XCTestExpectation *completionExpectation = nil;

    completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds proverGetCredentialsForFilter:filterJSON
                                    walletHandle:walletHandle
                                      completion:^(NSError *error, NSString *credentialsJSON) {
                                          err = error;
                                          outJson = credentialsJSON;
                                          [completionExpectation fulfill];
                                      }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils defaultTimeout]];

    if (credentialsJson) {*credentialsJson = outJson;}

    return err;
}

- (NSError *)proverSearchCredentialsForQuery:(NSString *)queryJSON
                                 walletHandle:(IndyHandle)walletHandle
                                 searchHandle:(IndyHandle *)searchHandle
                                   totalCount:(NSNumber **)totalCount {
    __block NSError *err = nil;
    XCTestExpectation *completionExpectation = nil;

    completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds proverSearchCredentialsForQuery:queryJSON
                                       walletHandle:walletHandle
                                         completion:^(NSError *error, IndyHandle outSearchHandle, NSNumber *outTotalCount) {
                                             err = error;
                                             if (searchHandle) *searchHandle = outSearchHandle;
                                             if (totalCount) *totalCount = outTotalCount;
                                             [completionExpectation fulfill];
                                         }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils defaultTimeout]];

    return err;
}

- (NSError *)proverFetchCredentialsWithSearchHandle:(IndyHandle)searchHandle
                                              count:(NSNumber *)count
                                     credentilsJson:(NSString **)credentialsJson {
    __block NSError *err = nil;
    __block NSString *outJson;
    XCTestExpectation *completionExpectation = nil;

    completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds proverFetchCredentialsWithSearchHandle:searchHandle
                                                    count:count
                                               completion:^(NSError *error, NSString *credentialsJSON) {
                                                   err = error;
                                                   outJson = credentialsJSON;
                                                   [completionExpectation fulfill];
                                               }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils defaultTimeout]];

    if (credentialsJson) {*credentialsJson = outJson;}

    return err;
}

- (NSError *)proverCloseCredentialsSearchWithHandle:(IndyHandle)searchHandle {

    XCTestExpectation *completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];
    __block NSError *err = nil;

    [IndyAnoncreds proverCloseCredentialsSearchWithHandle:searchHandle
                                               completion:^(NSError *error) {
                                                   err = error;
                                                   [completionExpectation fulfill];
                                               }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils defaultTimeout]];

    return err;
}

- (NSError *)proverSearchCredentialsForProofRequest:(NSString *)proofReqJSON
                                     extraQueryJson:(NSString *)extraQueryJson
                                       walletHandle:(IndyHandle)walletHandle
                                       searchHandle:(IndyHandle *)searchHandle {
    __block NSError *err = nil;
    XCTestExpectation *completionExpectation = nil;

    completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds proverSearchCredentialsForProofRequest:proofReqJSON
                                           extraQueryJSON:extraQueryJson
                                             walletHandle:walletHandle
                                               completion:^(NSError *error, IndyHandle outSearchHandle) {
                                                   err = error;
                                                   if (searchHandle) *searchHandle = outSearchHandle;
                                                   [completionExpectation fulfill];
                                               }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils defaultTimeout]];

    return err;
}

- (NSError *)proverFetchCredentialsForProofReqItemReferent:(NSString *)itemReferent
                                              searchHandle:(IndyHandle)searchHandle
                                                     count:(NSNumber *)count
                                            credentilsJson:(NSString **)credentialsJson {
    __block NSError *err = nil;
    __block NSString *outJson;
    XCTestExpectation *completionExpectation = nil;

    completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds proverFetchCredentialsForProofReqItemReferent:itemReferent
                                                    searchHandle:searchHandle
                                                           count:count
                                                      completion:^(NSError *error, NSString *credentialsJSON) {
                                                          err = error;
                                                          outJson = credentialsJSON;
                                                          [completionExpectation fulfill];
                                                      }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils defaultTimeout]];

    if (credentialsJson) {*credentialsJson = outJson;}

    return err;
}

- (NSError *)proverCloseCredentialsSearchForProofReqWithHandle:(IndyHandle)searchHandle {

    XCTestExpectation *completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];
    __block NSError *err = nil;

    [IndyAnoncreds proverCloseCredentialsSearchForProofReqWithHandle:searchHandle
                                                          completion:^(NSError *error) {
                                                              err = error;
                                                              [completionExpectation fulfill];
                                                          }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils defaultTimeout]];

    return err;
}

- (NSError *)proverCreateProofForRequest:(NSString *)proofRequestJSON
                requestedCredentialsJSON:(NSString *)requestedCredentialsJSON
                          masterSecretID:(NSString *)masterSecretID
                             schemasJSON:(NSString *)schemasJSON
                      credentialDefsJSON:(NSString *)credentialDefsJSON
                         revocStatesJSON:(NSString *)revocStatesJSON
                            walletHandle:(IndyHandle)walletHandle
                               proofJson:(NSString **)proofJson {
    __block NSError *err = nil;
    __block NSString *outProofJson;
    XCTestExpectation *completionExpectation = nil;

    completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds proverCreateProofForRequest:proofRequestJSON
                      requestedCredentialsJSON:requestedCredentialsJSON
                                masterSecretID:masterSecretID
                                   schemasJSON:schemasJSON
                            credentialDefsJSON:credentialDefsJSON
                               revocStatesJSON:revocStatesJSON
                                  walletHandle:walletHandle
                                    completion:^(NSError *error, NSString *proofJSON) {
                                        err = error;
                                        outProofJson = proofJSON;

                                        [completionExpectation fulfill];
                                    }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils longTimeout]];

    if (proofJson) {*proofJson = outProofJson;}
    return err;
}

- (NSError *)createRevocationStateForCredRevID:(NSString *)credRevID
                                     timestamp:(NSNumber *)timestamp
                                 revRegDefJSON:(NSString *)revRegDefJSON
                               revRegDeltaJSON:(NSString *)revRegDeltaJSON
                       blobStorageReaderHandle:(NSNumber *)blobStorageReaderHandle
                                  revStateJson:(NSString **)revStateJson {
    __block NSError *err = nil;
    __block NSString *outRevStateJson;
    XCTestExpectation *completionExpectation = nil;

    completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds createRevocationStateForCredRevID:credRevID
                                           timestamp:timestamp
                                       revRegDefJSON:revRegDefJSON
                                     revRegDeltaJSON:revRegDeltaJSON
                             blobStorageReaderHandle:blobStorageReaderHandle
                                          completion:^(NSError *error, NSString *revInfoJSON) {
                                              err = error;
                                              outRevStateJson = revInfoJSON;

                                              [completionExpectation fulfill];
                                          }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils longTimeout]];

    if (revStateJson) {*revStateJson = outRevStateJson;}
    return err;
}

- (NSError *)updateRevocationState:(NSString *)revStateJSON
                         credRevID:(NSString *)credRevID
                         timestamp:(NSNumber *)timestamp
                     revRegDefJSON:(NSString *)revRegDefJSON
                   revRegDeltaJSON:(NSString *)revRegDeltaJSON
           blobStorageReaderHandle:(NSNumber *)blobStorageReaderHandle
               updatedRevStateJson:(NSString **)updatedRevStateJson {
    __block NSError *err = nil;
    __block NSString *outUpdatedRevSateJson;
    XCTestExpectation *completionExpectation = nil;

    completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds updateRevocationState:revStateJSON
                               credRevID:credRevID
                               timestamp:timestamp
                           revRegDefJSON:revRegDefJSON
                         revRegDeltaJSON:revRegDeltaJSON
                 blobStorageReaderHandle:blobStorageReaderHandle
                              completion:^(NSError *error, NSString *updatedRevInfoJSON) {
                                  err = error;
                                  outUpdatedRevSateJson = updatedRevInfoJSON;

                                  [completionExpectation fulfill];
                              }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils longTimeout]];

    if (updatedRevStateJson) {*updatedRevStateJson = outUpdatedRevSateJson;}
    return err;
}

- (NSError *)verifierVerifyProofRequest:(NSString *)proofRequestJson
                              proofJSON:(NSString *)proofJSON
                            schemasJSON:(NSString *)schemasJSON
                     credentialDefsJSON:(NSString *)credentialDefsJSON
                       revocRegDefsJSON:(NSString *)revocRegDefsJSON
                          revocRegsJSON:(NSString *)revocRegsJSON
                                isValid:(BOOL *)isValid {
    __block NSError *err = nil;
    XCTestExpectation *completionExpectation = nil;

    completionExpectation = [[XCTestExpectation alloc] initWithDescription:@"completion finished"];

    [IndyAnoncreds verifierVerifyProofRequest:proofRequestJson
                                    proofJSON:proofJSON
                                  schemasJSON:schemasJSON
                           credentialDefsJSON:credentialDefsJSON
                             revocRegDefsJSON:revocRegDefsJSON
                                revocRegsJSON:revocRegsJSON
                                   completion:^(NSError *error, BOOL valid) {
                                       err = error;
                                       if (isValid) {
                                           *isValid = valid;
                                       }
                                       [completionExpectation fulfill];
                                   }];

    [self waitForExpectations:@[completionExpectation] timeout:[TestUtils longTimeout]];
    return err;

}

- (NSError *)initializeCommonWalletAndReturnHandle:(IndyHandle *)walletHandle
                                 credentialDefJson:(NSString **)credentialDefJson
                               credentialOfferJson:(NSString **)credentialOfferJson
                                 credentialReqJson:(NSString **)credentialReqJson
                                    credentialJson:(NSString **)credentialJson {
    if (self.isCommonWalletCreated) {
        if (walletHandle) {
            *walletHandle = self.walletHandle;
        }
        if (credentialDefJson) {
            *credentialDefJson = _singletoneCredentialdefJson;
        }
        if (credentialOfferJson) {
            *credentialOfferJson = _singletoneCredentialofferJson;
        }
        if (credentialReqJson) {
            *credentialReqJson = _singletoneCredentialreqJson;
        }
        if (credentialJson) {
            *credentialJson = _singletoneCredentialJson;
        }
        return [NSError errorWithDomain:@""
                                   code:Success
                               userInfo:nil];
    }

    [TestUtils cleanupStorage];

    NSError *ret;

    // 1. Create and open wallet
    self.walletHandle = 0;
    IndyHandle tempWalletHandle = 0;
    ret = [[WalletUtils sharedInstance] createAndOpenWalletWithHandle:&tempWalletHandle];
    XCTAssertEqual(ret.code, Success, @"WalletUtils::createAndOpenWalletWithPoolName failed");
    if (ret.code != Success) {return ret;}

    //2. Create GVT Schema
    NSString *gvtSchemaId;
    NSString *gvtSchemaJson;
    ret = [self issuerCreateSchemaWithName:[TestUtils gvtSchemaName]
                                   version:[TestUtils schemaVersion]
                                     attrs:[TestUtils gvtSchemaAttrs]
                                 issuerDID:[TestUtils issuerDid]
                                  schemaId:&gvtSchemaId
                                schemaJson:&gvtSchemaJson];
    XCTAssertEqual(ret.code, Success, @"issuerCreateSchemaForIssuerDID failed");

    //3. Create XYZ Schema
    NSString *xyzSchemaId;
    NSString *xyzSchemaJson;
    ret = [self issuerCreateSchemaWithName:[TestUtils xyzSchemaName]
                                   version:[TestUtils schemaVersion]
                                     attrs:[TestUtils xyzSchemaAttrs]
                                 issuerDID:[TestUtils issuerDid]
                                  schemaId:&xyzSchemaId
                                schemaJson:&xyzSchemaJson];
    XCTAssertEqual(ret.code, Success, @"issuerCreateSchemaForIssuerDID failed");

    //4. Issuer1 create GVT CredentialDef
    NSString *issuer1GvtCredentialDefId;
    NSString *issuer1GvtCredentialDefJson;
    ret = [self issuerCreateAndStoreCredentialDefForSchema:gvtSchemaJson
                                                 issuerDID:[TestUtils issuerDid]
                                                       tag:[TestUtils tag]
                                                      type:nil
                                                configJSON:[self defaultCredentialDefConfig]
                                              walletHandle:tempWalletHandle
                                                 credDefId:&issuer1GvtCredentialDefId
                                               credDefJson:&issuer1GvtCredentialDefJson];
    XCTAssertEqual(ret.code, Success, @"issuerCreateCredentialDefinifionWithWalletHandle failed");

    //5. Issuer1 create XYZ CredentialDef
    NSString *issuer1XyzCredentialDefId;
    NSString *issuer1XyzCredentialDefJson;
    ret = [self issuerCreateAndStoreCredentialDefForSchema:xyzSchemaJson
                                                 issuerDID:[TestUtils issuerDid]
                                                       tag:[TestUtils tag]
                                                      type:nil
                                                configJSON:[self defaultCredentialDefConfig]
                                              walletHandle:tempWalletHandle
                                                 credDefId:&issuer1XyzCredentialDefId
                                               credDefJson:&issuer1XyzCredentialDefJson];
    XCTAssertEqual(ret.code, Success, @"issuerCreateCredentialDefinifionWithWalletHandle failed");

    //6. Issuer2 create XYZ CredentialDef
    NSString *issuer2GvtCredentialDefId;
    NSString *issuer2GvtCredentialDefJson;
    ret = [self issuerCreateAndStoreCredentialDefForSchema:gvtSchemaJson
                                                 issuerDID:[TestUtils issuer2Did]
                                                       tag:[TestUtils tag]
                                                      type:nil
                                                configJSON:[self defaultCredentialDefConfig]
                                              walletHandle:tempWalletHandle
                                                 credDefId:&issuer2GvtCredentialDefId
                                               credDefJson:&issuer2GvtCredentialDefJson];
    XCTAssertEqual(ret.code, Success, @"issuerCreateCredentialDefinifionWithWalletHandle failed");

    // 7. Issuer1 create GVT Credential Offer
    NSString *issuer1GvtCredentialOfferJSON = nil;
    ret = [[AnoncredsUtils sharedInstance] issuerCreateCredentialOfferForCredDefId:issuer1GvtCredentialDefId
                                                                      walletHandle:tempWalletHandle
                                                                     credOfferJson:&issuer1GvtCredentialOfferJSON];
    XCTAssertEqual(ret.code, Success, @"AnoncredsUtils::issuerCreateAndStoreCredentialDef() failed!");

    //8. Issuer1 create XYZ Credential Offer
    NSString *issuer1XyzCredentialOfferJSON = nil;
    ret = [[AnoncredsUtils sharedInstance] issuerCreateCredentialOfferForCredDefId:issuer1XyzCredentialDefId
                                                                      walletHandle:tempWalletHandle
                                                                     credOfferJson:&issuer1XyzCredentialOfferJSON];
    XCTAssertEqual(ret.code, Success, @"AnoncredsUtils::issuerCreateAndStoreCredentialDef() failed!");

    // 9. Issuer2 create GVT Credential Offer
    NSString *issuer2GvtCredentialOfferJSON = nil;
    ret = [[AnoncredsUtils sharedInstance] issuerCreateCredentialOfferForCredDefId:issuer2GvtCredentialDefId
                                                                      walletHandle:tempWalletHandle
                                                                     credOfferJson:&issuer2GvtCredentialOfferJSON];
    XCTAssertEqual(ret.code, Success, @"AnoncredsUtils::issuerCreateAndStoreCredentialDef() failed!");

    //10. Create MasterSecret
    ret = [self proverCreateMasterSecret:[TestUtils commonMasterSecretName]
                            walletHandle:tempWalletHandle
                       outMasterSecretId:nil];
    XCTAssertEqual(ret.code, Success, @"proverCreateMasterSecret failed");

    //11. Prover create Credential Request for Issuer1 GVT Credential
    NSString *issuer1GvtCredentialRequest;
    NSString *issuer1GvtCredentialRequestMetadata;
    ret = [self proverCreateCredentialReqForCredentialOffer:issuer1GvtCredentialOfferJSON
                                          credentialDefJSON:issuer1GvtCredentialDefJson
                                                  proverDID:[TestUtils proverDid]
                                             masterSecretID:[TestUtils commonMasterSecretName]
                                               walletHandle:tempWalletHandle
                                                credReqJson:&issuer1GvtCredentialRequest
                                        credReqMetadataJson:&issuer1GvtCredentialRequestMetadata];
    XCTAssertEqual(ret.code, Success, @"proverCreateAndStoreCredentialReq failed for issuer1GvtCredentialRequest");

    //12. Issuer1 create  GVT Credential
    NSString *issuer1GvtCredential;
    ret = [self issuerCreateCredentialForCredentialRequest:issuer1GvtCredentialRequest
                                             credOfferJSON:issuer1GvtCredentialOfferJSON
                                            credValuesJSON:[self getGvtCredentialValuesJson]
                                                  revRegId:nil
                                   blobStorageReaderHandle:nil
                                              walletHandle:tempWalletHandle
                                                  credJson:&issuer1GvtCredential
                                               credRevocId:nil
                                         revocRegDeltaJSON:nil];
    XCTAssertEqual(ret.code, Success, @"issuerCreateCredentialWithWalletHandle failed");

    //13. Prover store GVT credential from issuer1
    ret = [self proverStoreCredential:issuer1GvtCredential
                               credID:[self credentialId1]
                  credReqMetadataJSON:issuer1GvtCredentialRequestMetadata
                          credDefJSON:issuer1GvtCredentialDefJson
                        revRegDefJSON:nil
                         walletHandle:tempWalletHandle
                            outCredId:nil];
    XCTAssertEqual(ret.code, Success, @"proverStoreCredentialWithWalletHandle failed");

    //14. Prover create Credential Request for Issuer1 XYZ Credential
    NSString *issuer1XyzCredentialRequest;
    NSString *issuer1XyzCredentialRequestMetadata;
    ret = [self proverCreateCredentialReqForCredentialOffer:issuer1XyzCredentialOfferJSON
                                          credentialDefJSON:issuer1XyzCredentialDefJson
                                                  proverDID:[TestUtils proverDid]
                                             masterSecretID:[TestUtils commonMasterSecretName]
                                               walletHandle:tempWalletHandle
                                                credReqJson:&issuer1XyzCredentialRequest
                                        credReqMetadataJson:&issuer1XyzCredentialRequestMetadata];
    XCTAssertEqual(ret.code, Success, @"proverCreateAndStoreCredentialReq failed for issuer1GvtCredentialRequest");

    //15. Issuer1 create  XYZ Credential
    NSString *issuer1XyzCredential;
    ret = [self issuerCreateCredentialForCredentialRequest:issuer1XyzCredentialRequest
                                             credOfferJSON:issuer1XyzCredentialOfferJSON
                                            credValuesJSON:[self getXyzCredentialValuesJson]
                                                  revRegId:nil
                                   blobStorageReaderHandle:nil
                                              walletHandle:tempWalletHandle
                                                  credJson:&issuer1XyzCredential
                                               credRevocId:nil
                                         revocRegDeltaJSON:nil];
    XCTAssertEqual(ret.code, Success, @"issuerCreateCredentialWithWalletHandle failed");

    //16. Prover store XYZ credential from Issuer1
    ret = [self proverStoreCredential:issuer1XyzCredential
                               credID:[self credentialId2]
                  credReqMetadataJSON:issuer1XyzCredentialRequestMetadata
                          credDefJSON:issuer1XyzCredentialDefJson
                        revRegDefJSON:nil
                         walletHandle:tempWalletHandle
                            outCredId:nil];
    XCTAssertEqual(ret.code, Success, @"proverStoreCredentialWithWalletHandle failed");


    //17. Prover create Credential Request for Issuer2 GVT Credential
    NSString *issuer2GvtCredentialRequest;
    NSString *issuer2GvtCredentialRequestMetadata;
    ret = [self proverCreateCredentialReqForCredentialOffer:issuer2GvtCredentialOfferJSON
                                          credentialDefJSON:issuer2GvtCredentialDefJson
                                                  proverDID:[TestUtils proverDid]
                                             masterSecretID:[TestUtils commonMasterSecretName]
                                               walletHandle:tempWalletHandle
                                                credReqJson:&issuer2GvtCredentialRequest
                                        credReqMetadataJson:&issuer2GvtCredentialRequestMetadata];
    XCTAssertEqual(ret.code, Success, @"proverCreateAndStoreCredentialReq failed for issuer2GvtCredentialRequest");

    //18. Issuer2 create  GVT Credential
    NSString *issuer2GvtCredential;
    ret = [self issuerCreateCredentialForCredentialRequest:issuer2GvtCredentialRequest
                                             credOfferJSON:issuer2GvtCredentialOfferJSON
                                            credValuesJSON:[self getGvt2CredentialValuesJson]
                                                  revRegId:nil
                                   blobStorageReaderHandle:nil
                                              walletHandle:tempWalletHandle
                                                  credJson:&issuer2GvtCredential
                                               credRevocId:nil
                                         revocRegDeltaJSON:nil];
    XCTAssertEqual(ret.code, Success, @"issuerCreateCredentialWithWalletHandle failed");

    //18. Prover store GVT credential from Issuer2
    ret = [self proverStoreCredential:issuer2GvtCredential
                               credID:@"credentialID3"
                  credReqMetadataJSON:issuer2GvtCredentialRequestMetadata
                          credDefJSON:issuer2GvtCredentialDefJson
                        revRegDefJSON:nil
                         walletHandle:tempWalletHandle
                            outCredId:nil];
    XCTAssertEqual(ret.code, Success, @"proverStoreCredentialWithWalletHandle failed");

    if (walletHandle) {*walletHandle = tempWalletHandle;}
    if (credentialDefJson) {*credentialDefJson = issuer1GvtCredentialDefJson;}
    if (credentialOfferJson) {*credentialOfferJson = issuer1GvtCredentialOfferJSON;}
    if (credentialReqJson) {*credentialReqJson = issuer1GvtCredentialRequest;}
    if (credentialJson) {*credentialJson = issuer1GvtCredential;}
    self.walletHandle = tempWalletHandle;
    _singletoneCredentialdefJson = issuer1GvtCredentialDefJson;
    _singletoneCredentialofferJson = issuer1GvtCredentialOfferJSON;
    _singletoneCredentialreqJson = issuer1GvtCredentialRequest;
    _singletoneCredentialJson = issuer1GvtCredential;

    self.isCommonWalletCreated = true;

    return ret;
}

- (NSString *)toJson:(NSDictionary *)dictionary {
    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:dictionary
                                                       options:NSJSONWritingPrettyPrinted
                                                         error:nil];
    return [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
}

@end
