from typing import Optional, Union

from .._command import LibindyCommand


class Wallet:

    @staticmethod
    @LibindyCommand('indy_create_wallet')
    async def create_wallet(
            wallet_config: Union[dict, str],
            wallet_credentials: Union[dict, str]
    ):
        """Creates a new indy wallet.

        Creates a new indy wallet along the specifications of the wallet
        config. By default, it will be saved in the form of a database file on
        the file system, but custom wallet storage types can override this
        behavior.

        :param wallet_config: The configuration values of the wallet in the
            form of a dict or a stringified JSON object.

            Keys:
                id: A string representing the identifier of the wallet. It has
                    to be unique inside a wallet storage.
                storage_type: An optional string to set a non-default wallet
                    storage type. It has to be the name of a storage type that
                    was registered earlier. The default wallet storage type is
                    "default", which will store the wallets as a database file
                    on the local file system.

                    NOTE: This version of the SBCA-Indy-Wrapper does not
                        support wallet storage registration!
                storage_config: An optional JSON object that contains
                    configuration values for the wallet storage type specified
                    above. The supported keys are defined by the storage type.

                    For storage types that support the "default" configuration:
                        path: An optional string that defines the directory
                            where the wallet will be saved in. The default
                            value is "<$HOME>/.indy_client/wallet".
        :param wallet_credentials: The credentials for the wallet (and, if
            necessary, the wallet storage) in the form of a dict or stringified
            JSON object.

            Keys:
                key: A key that is used as wallet passphrase. The wallet
                    contents will be derived from that key.
                storage_credentials: Ab optional JSON object that contains
                    credential values for the wallet storage. The supported
                    keys are defined by the storage type.

                    By default, this is empty.
                key_derivation_method: The name of the method that should be
                    used for the wallet key derivation.

                    Supported methods are:
                        ARGON2I_MOD: Default derivation method
                        ARGON2I_INT: Less secure, but faster derivation method
                        RAW: No key derivation
                            RAW keys are generated by the generate_wallet_key()
                            method

        :raises WalletAlreadyExistsError: Raised if a wallet with the given id
            already exists in the specified wallet storage.
        :raises UnknownWalletTypeError: Raised if the specified wallet storage
            type is not registered.
        """
        pass

    @staticmethod
    @LibindyCommand('indy_delete_wallet')
    async def delete_wallet(
            wallet_config: Union[dict, str],
            wallet_credentials: Union[dict, str]
    ):
        """Deletes an existing indy wallet.

        This will permanently remove the wallet and all its contents. If the
        stored data should be preserved, is should be exported by using the
        export_wallet() method first.

        :param wallet_config: -> See create_wallet()
        :param wallet_credentials: -> See create_wallet()

        :raises WalletNotFoundError: Raised if no wallet with the given id has
            been found in the specified wallet storage.
        :raises CommonInvalidStateError: Raised if trying to delete a wallet
            that is currently open.
        :raises InvalidWalletCredentialsError: Raised if trying to delete the
            wallet using invalid credentials.
        """
        pass

    @staticmethod
    @LibindyCommand('indy_open_wallet')
    async def open_wallet(
            wallet_config: Union[dict, str],
            wallet_credentials: Union[dict, str]
    ) -> int:
        """Opens an existing indy wallet.

        This will open the wallet and allow access to the cryptographic data
        that is stored inside. The function returns a wallet handle, which is
        used by functions that require wallet access and to close the wallet.

        :param wallet_config: -> See create_wallet()
        :param wallet_credentials: -> See create_wallet()
            Additional keys:
                rekey: An optional string that will replace the current wallet
                    passphrase after successfully opening the wallet.
                rekey_derivation_method: Derivation method for the new rekey.
                    This will only need to be set when a rekey is specified and
                    a different derivation method than the default method
                    (ARGON2I_MOD) is chosen.

        :raises WalletNotFoundError: Raised if no wallet with the given id has
            been found in the specified wallet storage.
        :raises WalletAlreadyOpenError: Raised if the wallet that is to be
            opened is already open.
        :raises InvalidWalletCredentialsError: Raised if trying to open the
            wallet using invalid credentials.

        :returns wallet_handle: The handle to the open wallet as an integer.
        """
        pass

    @staticmethod
    @LibindyCommand('indy_close_wallet')
    async def close_wallet(
            wallet_handle: int
    ):
        """Closes an open indy wallet.

        Closing the wallet will disallow any access to the stored data and will
        invalidate the handle that was used for wallet interactions.

        :param wallet_handle: The handle to the wallet to close.

        :raises InvalidWalletHandleError: Raised if no wallet is open on the
            passed wallet handle.
        """
        pass

    @staticmethod
    @LibindyCommand('indy_import_wallet')
    async def import_wallet(
            wallet_config: Union[dict, str],
            wallet_credentials: Union[dict, str],
            import_config: Union[dict, str]
    ):
        """Imports wallet data into a new wallet.

        :param wallet_config: -> see create_wallet()
        :param wallet_credentials: -> see create_wallet()
        :param import_config: The information about the export file that should
            be imported in the form of a dict or a stringified JSON object.

            Keys:
                path: A string that points to the path where the export file
                    is located. It includes the file name, so if you set the
                    path to "/usr/export" it will look for a file called
                    "export" in the directory "/usr"!
                key: The key that was used to export the data from the origin
                    wallet.

        :raises CommonIOError: Raised if the export file at the specified path
            could not be found or opened.
        :raises WalletAlreadyExistsError: Raised if a wallet with the given id
            already exists in the specified wallet storage.
        :raises UnknownWalletTypeError: Raised if the specified wallet storage
            type is not registered.
        """
        pass

    @staticmethod
    @LibindyCommand('indy_export_wallet')
    async def export_wallet(
            wallet_handle: int,
            export_config: Union[dict, str]
    ):
        """Exports wallet data to an encrypted file.

        This will export all data that is currently stored inside a wallet to a
        file. The wallet will not be deleted after exporting the data.

        :param wallet_handle: The handle to the wallet to export data from.
        :param export_config: The export configuration values in the form of a
            dict or stringified JSON object.

            Keys:
                path: A string that points to the path where the export file
                    should be saved. It includes the file name, so if you set
                    the path to "/usr/export" it will create a file called
                    "export" in the directory "/usr"!
                key: A derivation key for the wallet export file.
                key_derivation_method: The derivation method name for the key.
                    See create_wallet() for supported methods.

        :raises InvalidWalletHandleError: Raised if no wallet is open on the
            passed wallet handle.
        :raises CommonIOError: Raised if the export file at the specified path
            could not be created.
        """
        pass

    @staticmethod
    @LibindyCommand('indy_generate_wallet_key')
    async def generate_raw_derivation_key(
            generator_config: Optional[Union[dict, str]]
    ) -> str:
        """Generates a raw derivation key.

        This will generate a new derivation key to be used as a raw wallet or
        export key.

        :param generator_config: An optional configuration container that holds
            the seed to generate a pre-determined key. If no config or an empty
            JSON is passed, a random key will be generated.

            Keys:
                seed: The seed to generate the key from as an UTF-8, Base64 or
                    HEX string.

        :returns raw_key: The generated derivation key.
        """
        pass
