using Hyperledger.Indy.CryptoApi;
using Hyperledger.Indy.WalletApi;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Threading.Tasks;

namespace Hyperledger.Indy.Test.CryptoTests
{
    [TestClass]
    public class BoxSealOpenTest : CryptoIntegrationTestBase
    {
        [TestMethod]
        public async Task TestBoxSealOpenWorks()
        {
            var encryptedMessage = await Crypto.BoxSealAsync(recipientVerKey, MESSAGE);

            var decryptedMessage = await Crypto.BoxSealOpenAsync(wallet, recipientVerKey, encryptedMessage);
            Assert.IsTrue(MESSAGE.SequenceEqual(decryptedMessage));
        }

        [TestMethod]
        public async Task TestBoxOpenFailsIfRecipientKeyNotInWallet()
        {
            var encryptedMessage = await Crypto.BoxSealAsync(recipientVerKey, MESSAGE);

            var ex = await Assert.ThrowsExceptionAsync<WalletValueNotFoundException>(() =>
                Crypto.BoxSealOpenAsync(wallet, KEY_NOT_IN_WALLET, encryptedMessage)
           );
        }

        [TestMethod]
        public async Task TestBoxOpenFailsIfKeyNotForEncryptedMessage()
        {
            var encryptedMessage = await Crypto.BoxSealAsync(recipientVerKey, MESSAGE);

            var ex = await Assert.ThrowsExceptionAsync<InvalidStructureException>(() =>
                Crypto.BoxSealOpenAsync(wallet, senderVerKey, encryptedMessage)
           );
        }
       
    }
}
