using Hyperledger.Indy.CryptoApi;
using Hyperledger.Indy.WalletApi;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Threading.Tasks;

namespace Hyperledger.Indy.Test.CryptoTests
{
    [TestClass]
    public class BoxOpenTest : CryptoIntegrationTestBase
    {
        [TestMethod]
        public async Task TestBoxOpenWorks()
        {
            var boxResult = await Crypto.BoxAsync(wallet, senderVerKey, recipientVerKey, MESSAGE);

            var decryptedMessage = await Crypto.BoxOpenAsync(wallet, recipientVerKey, senderVerKey, boxResult.EncryptedMessage, boxResult.Nonce);
            Assert.IsTrue(MESSAGE.SequenceEqual(decryptedMessage)); 
        }

        [TestMethod]
        public async Task TestBoxOpenFailsIfRecipientKeyNotInWallet()
        {
            var boxResult = await Crypto.BoxAsync(wallet, senderVerKey, recipientVerKey, MESSAGE);

            var ex = await Assert.ThrowsExceptionAsync<WalletValueNotFoundException>(() =>
                Crypto.BoxOpenAsync(wallet, KEY_NOT_IN_WALLET, senderVerKey, boxResult.EncryptedMessage, boxResult.Nonce)
           );
        }

        [TestMethod]
        public async Task TestBoxOpenFailsIfSenderKeyNotInWallet()
        {
            var boxResult = await Crypto.BoxAsync(wallet, senderVerKey, recipientVerKey, MESSAGE);

            var ex = await Assert.ThrowsExceptionAsync<InvalidStructureException>(() =>
                Crypto.BoxOpenAsync(wallet, recipientVerKey, KEY_NOT_IN_WALLET, boxResult.EncryptedMessage, boxResult.Nonce)
           );
        }

        [TestMethod]
        public async Task TestBoxOpenFailsIfNonceDoesNotMatchCiphertext()
        {
            var boxResult = await Crypto.BoxAsync(wallet, senderVerKey, recipientVerKey, MESSAGE);
            var badNonce = new byte[] { 1, 2 };

            var ex = await Assert.ThrowsExceptionAsync<InvalidStructureException>(() =>
                Crypto.BoxOpenAsync(wallet, recipientVerKey, senderVerKey, boxResult.EncryptedMessage, badNonce)
           );
        }
    }
}
